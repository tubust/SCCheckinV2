'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SCCheckInDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SCCheckInDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCheckIns As CheckInsDataTable
    
    Private tableContestants As ContestantsDataTable
    
    Private tableOKSwingMemberList As OKSwingMemberListDataTable
    
    Private tabletblFees As tblFeesDataTable
    
    Private tableActiveMembers As ActiveMembersDataTable
    
    Private tableExpiringMembers As ExpiringMembersDataTable
    
    Private tableMembers As MembersDataTable
    
    Private tableMissingMembers As MissingMembersDataTable
    
    Private tableNewMembers As NewMembersDataTable
    
    Private tableNextMonthBirthdays As NextMonthBirthdaysDataTable
    
    Private tableThankYouMembers As ThankYouMembersDataTable
    
    Private tableMemberBirthdays As MemberBirthdaysDataTable
    
    Private tableNewPinkDancers As NewPinkDancersDataTable
    
    Private tableNext3MonthBirthdays As Next3MonthBirthdaysDataTable
    
    Private tablePaidYearlyDuesLastMonth As PaidYearlyDuesLastMonthDataTable
    
    Private tableYearlyDuesSoon As YearlyDuesSoonDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CheckIns")) Is Nothing) Then
                MyBase.Tables.Add(New CheckInsDataTable(ds.Tables("CheckIns")))
            End If
            If (Not (ds.Tables("Contestants")) Is Nothing) Then
                MyBase.Tables.Add(New ContestantsDataTable(ds.Tables("Contestants")))
            End If
            If (Not (ds.Tables("OKSwingMemberList")) Is Nothing) Then
                MyBase.Tables.Add(New OKSwingMemberListDataTable(ds.Tables("OKSwingMemberList")))
            End If
            If (Not (ds.Tables("tblFees")) Is Nothing) Then
                MyBase.Tables.Add(New tblFeesDataTable(ds.Tables("tblFees")))
            End If
            If (Not (ds.Tables("ActiveMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ActiveMembersDataTable(ds.Tables("ActiveMembers")))
            End If
            If (Not (ds.Tables("ExpiringMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ExpiringMembersDataTable(ds.Tables("ExpiringMembers")))
            End If
            If (Not (ds.Tables("Members")) Is Nothing) Then
                MyBase.Tables.Add(New MembersDataTable(ds.Tables("Members")))
            End If
            If (Not (ds.Tables("MissingMembers")) Is Nothing) Then
                MyBase.Tables.Add(New MissingMembersDataTable(ds.Tables("MissingMembers")))
            End If
            If (Not (ds.Tables("NewMembers")) Is Nothing) Then
                MyBase.Tables.Add(New NewMembersDataTable(ds.Tables("NewMembers")))
            End If
            If (Not (ds.Tables("NextMonthBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New NextMonthBirthdaysDataTable(ds.Tables("NextMonthBirthdays")))
            End If
            If (Not (ds.Tables("ThankYouMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ThankYouMembersDataTable(ds.Tables("ThankYouMembers")))
            End If
            If (Not (ds.Tables("MemberBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New MemberBirthdaysDataTable(ds.Tables("MemberBirthdays")))
            End If
            If (Not (ds.Tables("NewPinkDancers")) Is Nothing) Then
                MyBase.Tables.Add(New NewPinkDancersDataTable(ds.Tables("NewPinkDancers")))
            End If
            If (Not (ds.Tables("Next3MonthBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New Next3MonthBirthdaysDataTable(ds.Tables("Next3MonthBirthdays")))
            End If
            If (Not (ds.Tables("PaidYearlyDuesLastMonth")) Is Nothing) Then
                MyBase.Tables.Add(New PaidYearlyDuesLastMonthDataTable(ds.Tables("PaidYearlyDuesLastMonth")))
            End If
            If (Not (ds.Tables("YearlyDuesSoon")) Is Nothing) Then
                MyBase.Tables.Add(New YearlyDuesSoonDataTable(ds.Tables("YearlyDuesSoon")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CheckIns() As CheckInsDataTable
        Get
            Return Me.tableCheckIns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contestants() As ContestantsDataTable
        Get
            Return Me.tableContestants
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OKSwingMemberList() As OKSwingMemberListDataTable
        Get
            Return Me.tableOKSwingMemberList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblFees() As tblFeesDataTable
        Get
            Return Me.tabletblFees
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ActiveMembers() As ActiveMembersDataTable
        Get
            Return Me.tableActiveMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExpiringMembers() As ExpiringMembersDataTable
        Get
            Return Me.tableExpiringMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Members() As MembersDataTable
        Get
            Return Me.tableMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MissingMembers() As MissingMembersDataTable
        Get
            Return Me.tableMissingMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NewMembers() As NewMembersDataTable
        Get
            Return Me.tableNewMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NextMonthBirthdays() As NextMonthBirthdaysDataTable
        Get
            Return Me.tableNextMonthBirthdays
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ThankYouMembers() As ThankYouMembersDataTable
        Get
            Return Me.tableThankYouMembers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MemberBirthdays() As MemberBirthdaysDataTable
        Get
            Return Me.tableMemberBirthdays
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NewPinkDancers() As NewPinkDancersDataTable
        Get
            Return Me.tableNewPinkDancers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Next3MonthBirthdays() As Next3MonthBirthdaysDataTable
        Get
            Return Me.tableNext3MonthBirthdays
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PaidYearlyDuesLastMonth() As PaidYearlyDuesLastMonthDataTable
        Get
            Return Me.tablePaidYearlyDuesLastMonth
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property YearlyDuesSoon() As YearlyDuesSoonDataTable
        Get
            Return Me.tableYearlyDuesSoon
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SCCheckInDataSet = CType(MyBase.Clone,SCCheckInDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CheckIns")) Is Nothing) Then
                MyBase.Tables.Add(New CheckInsDataTable(ds.Tables("CheckIns")))
            End If
            If (Not (ds.Tables("Contestants")) Is Nothing) Then
                MyBase.Tables.Add(New ContestantsDataTable(ds.Tables("Contestants")))
            End If
            If (Not (ds.Tables("OKSwingMemberList")) Is Nothing) Then
                MyBase.Tables.Add(New OKSwingMemberListDataTable(ds.Tables("OKSwingMemberList")))
            End If
            If (Not (ds.Tables("tblFees")) Is Nothing) Then
                MyBase.Tables.Add(New tblFeesDataTable(ds.Tables("tblFees")))
            End If
            If (Not (ds.Tables("ActiveMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ActiveMembersDataTable(ds.Tables("ActiveMembers")))
            End If
            If (Not (ds.Tables("ExpiringMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ExpiringMembersDataTable(ds.Tables("ExpiringMembers")))
            End If
            If (Not (ds.Tables("Members")) Is Nothing) Then
                MyBase.Tables.Add(New MembersDataTable(ds.Tables("Members")))
            End If
            If (Not (ds.Tables("MissingMembers")) Is Nothing) Then
                MyBase.Tables.Add(New MissingMembersDataTable(ds.Tables("MissingMembers")))
            End If
            If (Not (ds.Tables("NewMembers")) Is Nothing) Then
                MyBase.Tables.Add(New NewMembersDataTable(ds.Tables("NewMembers")))
            End If
            If (Not (ds.Tables("NextMonthBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New NextMonthBirthdaysDataTable(ds.Tables("NextMonthBirthdays")))
            End If
            If (Not (ds.Tables("ThankYouMembers")) Is Nothing) Then
                MyBase.Tables.Add(New ThankYouMembersDataTable(ds.Tables("ThankYouMembers")))
            End If
            If (Not (ds.Tables("MemberBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New MemberBirthdaysDataTable(ds.Tables("MemberBirthdays")))
            End If
            If (Not (ds.Tables("NewPinkDancers")) Is Nothing) Then
                MyBase.Tables.Add(New NewPinkDancersDataTable(ds.Tables("NewPinkDancers")))
            End If
            If (Not (ds.Tables("Next3MonthBirthdays")) Is Nothing) Then
                MyBase.Tables.Add(New Next3MonthBirthdaysDataTable(ds.Tables("Next3MonthBirthdays")))
            End If
            If (Not (ds.Tables("PaidYearlyDuesLastMonth")) Is Nothing) Then
                MyBase.Tables.Add(New PaidYearlyDuesLastMonthDataTable(ds.Tables("PaidYearlyDuesLastMonth")))
            End If
            If (Not (ds.Tables("YearlyDuesSoon")) Is Nothing) Then
                MyBase.Tables.Add(New YearlyDuesSoonDataTable(ds.Tables("YearlyDuesSoon")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCheckIns = CType(MyBase.Tables("CheckIns"),CheckInsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCheckIns) Is Nothing) Then
                Me.tableCheckIns.InitVars
            End If
        End If
        Me.tableContestants = CType(MyBase.Tables("Contestants"),ContestantsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContestants) Is Nothing) Then
                Me.tableContestants.InitVars
            End If
        End If
        Me.tableOKSwingMemberList = CType(MyBase.Tables("OKSwingMemberList"),OKSwingMemberListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOKSwingMemberList) Is Nothing) Then
                Me.tableOKSwingMemberList.InitVars
            End If
        End If
        Me.tabletblFees = CType(MyBase.Tables("tblFees"),tblFeesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblFees) Is Nothing) Then
                Me.tabletblFees.InitVars
            End If
        End If
        Me.tableActiveMembers = CType(MyBase.Tables("ActiveMembers"),ActiveMembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableActiveMembers) Is Nothing) Then
                Me.tableActiveMembers.InitVars
            End If
        End If
        Me.tableExpiringMembers = CType(MyBase.Tables("ExpiringMembers"),ExpiringMembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExpiringMembers) Is Nothing) Then
                Me.tableExpiringMembers.InitVars
            End If
        End If
        Me.tableMembers = CType(MyBase.Tables("Members"),MembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMembers) Is Nothing) Then
                Me.tableMembers.InitVars
            End If
        End If
        Me.tableMissingMembers = CType(MyBase.Tables("MissingMembers"),MissingMembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMissingMembers) Is Nothing) Then
                Me.tableMissingMembers.InitVars
            End If
        End If
        Me.tableNewMembers = CType(MyBase.Tables("NewMembers"),NewMembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNewMembers) Is Nothing) Then
                Me.tableNewMembers.InitVars
            End If
        End If
        Me.tableNextMonthBirthdays = CType(MyBase.Tables("NextMonthBirthdays"),NextMonthBirthdaysDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNextMonthBirthdays) Is Nothing) Then
                Me.tableNextMonthBirthdays.InitVars
            End If
        End If
        Me.tableThankYouMembers = CType(MyBase.Tables("ThankYouMembers"),ThankYouMembersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableThankYouMembers) Is Nothing) Then
                Me.tableThankYouMembers.InitVars
            End If
        End If
        Me.tableMemberBirthdays = CType(MyBase.Tables("MemberBirthdays"),MemberBirthdaysDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMemberBirthdays) Is Nothing) Then
                Me.tableMemberBirthdays.InitVars
            End If
        End If
        Me.tableNewPinkDancers = CType(MyBase.Tables("NewPinkDancers"),NewPinkDancersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNewPinkDancers) Is Nothing) Then
                Me.tableNewPinkDancers.InitVars
            End If
        End If
        Me.tableNext3MonthBirthdays = CType(MyBase.Tables("Next3MonthBirthdays"),Next3MonthBirthdaysDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNext3MonthBirthdays) Is Nothing) Then
                Me.tableNext3MonthBirthdays.InitVars
            End If
        End If
        Me.tablePaidYearlyDuesLastMonth = CType(MyBase.Tables("PaidYearlyDuesLastMonth"),PaidYearlyDuesLastMonthDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePaidYearlyDuesLastMonth) Is Nothing) Then
                Me.tablePaidYearlyDuesLastMonth.InitVars
            End If
        End If
        Me.tableYearlyDuesSoon = CType(MyBase.Tables("YearlyDuesSoon"),YearlyDuesSoonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableYearlyDuesSoon) Is Nothing) Then
                Me.tableYearlyDuesSoon.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SCCheckInDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SCCheckInDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCheckIns = New CheckInsDataTable
        MyBase.Tables.Add(Me.tableCheckIns)
        Me.tableContestants = New ContestantsDataTable
        MyBase.Tables.Add(Me.tableContestants)
        Me.tableOKSwingMemberList = New OKSwingMemberListDataTable
        MyBase.Tables.Add(Me.tableOKSwingMemberList)
        Me.tabletblFees = New tblFeesDataTable
        MyBase.Tables.Add(Me.tabletblFees)
        Me.tableActiveMembers = New ActiveMembersDataTable
        MyBase.Tables.Add(Me.tableActiveMembers)
        Me.tableExpiringMembers = New ExpiringMembersDataTable
        MyBase.Tables.Add(Me.tableExpiringMembers)
        Me.tableMembers = New MembersDataTable
        MyBase.Tables.Add(Me.tableMembers)
        Me.tableMissingMembers = New MissingMembersDataTable
        MyBase.Tables.Add(Me.tableMissingMembers)
        Me.tableNewMembers = New NewMembersDataTable
        MyBase.Tables.Add(Me.tableNewMembers)
        Me.tableNextMonthBirthdays = New NextMonthBirthdaysDataTable
        MyBase.Tables.Add(Me.tableNextMonthBirthdays)
        Me.tableThankYouMembers = New ThankYouMembersDataTable
        MyBase.Tables.Add(Me.tableThankYouMembers)
        Me.tableMemberBirthdays = New MemberBirthdaysDataTable
        MyBase.Tables.Add(Me.tableMemberBirthdays)
        Me.tableNewPinkDancers = New NewPinkDancersDataTable
        MyBase.Tables.Add(Me.tableNewPinkDancers)
        Me.tableNext3MonthBirthdays = New Next3MonthBirthdaysDataTable
        MyBase.Tables.Add(Me.tableNext3MonthBirthdays)
        Me.tablePaidYearlyDuesLastMonth = New PaidYearlyDuesLastMonthDataTable
        MyBase.Tables.Add(Me.tablePaidYearlyDuesLastMonth)
        Me.tableYearlyDuesSoon = New YearlyDuesSoonDataTable
        MyBase.Tables.Add(Me.tableYearlyDuesSoon)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCheckIns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContestants() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOKSwingMemberList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblFees() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeActiveMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExpiringMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMissingMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNewMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNextMonthBirthdays() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeThankYouMembers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMemberBirthdays() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNewPinkDancers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNext3MonthBirthdays() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePaidYearlyDuesLastMonth() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeYearlyDuesSoon() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SCCheckInDataSet = New SCCheckInDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CheckInsRowChangeEventHandler(ByVal sender As Object, ByVal e As CheckInsRowChangeEvent)
    
    Public Delegate Sub ContestantsRowChangeEventHandler(ByVal sender As Object, ByVal e As ContestantsRowChangeEvent)
    
    Public Delegate Sub OKSwingMemberListRowChangeEventHandler(ByVal sender As Object, ByVal e As OKSwingMemberListRowChangeEvent)
    
    Public Delegate Sub tblFeesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFeesRowChangeEvent)
    
    Public Delegate Sub ActiveMembersRowChangeEventHandler(ByVal sender As Object, ByVal e As ActiveMembersRowChangeEvent)
    
    Public Delegate Sub ExpiringMembersRowChangeEventHandler(ByVal sender As Object, ByVal e As ExpiringMembersRowChangeEvent)
    
    Public Delegate Sub MembersRowChangeEventHandler(ByVal sender As Object, ByVal e As MembersRowChangeEvent)
    
    Public Delegate Sub MissingMembersRowChangeEventHandler(ByVal sender As Object, ByVal e As MissingMembersRowChangeEvent)
    
    Public Delegate Sub NewMembersRowChangeEventHandler(ByVal sender As Object, ByVal e As NewMembersRowChangeEvent)
    
    Public Delegate Sub NextMonthBirthdaysRowChangeEventHandler(ByVal sender As Object, ByVal e As NextMonthBirthdaysRowChangeEvent)
    
    Public Delegate Sub ThankYouMembersRowChangeEventHandler(ByVal sender As Object, ByVal e As ThankYouMembersRowChangeEvent)
    
    Public Delegate Sub MemberBirthdaysRowChangeEventHandler(ByVal sender As Object, ByVal e As MemberBirthdaysRowChangeEvent)
    
    Public Delegate Sub NewPinkDancersRowChangeEventHandler(ByVal sender As Object, ByVal e As NewPinkDancersRowChangeEvent)
    
    Public Delegate Sub Next3MonthBirthdaysRowChangeEventHandler(ByVal sender As Object, ByVal e As Next3MonthBirthdaysRowChangeEvent)
    
    Public Delegate Sub PaidYearlyDuesLastMonthRowChangeEventHandler(ByVal sender As Object, ByVal e As PaidYearlyDuesLastMonthRowChangeEvent)
    
    Public Delegate Sub YearlyDuesSoonRowChangeEventHandler(ByVal sender As Object, ByVal e As YearlyDuesSoonRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CheckInsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCheckInID As Global.System.Data.DataColumn
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFullName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnPaidType As Global.System.Data.DataColumn
        
        Private columnPaidAmount As Global.System.Data.DataColumn
        
        Private columnPaidDate As Global.System.Data.DataColumn
        
        Private columnPaidDesc As Global.System.Data.DataColumn
        
        Private columnDanceType As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnReferredBy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CheckIns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckInIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckInID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DanceTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDanceType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferredByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferredBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CheckInsRow
            Get
                Return CType(Me.Rows(index),CheckInsRow)
            End Get
        End Property
        
        Public Event CheckInsRowChanging As CheckInsRowChangeEventHandler
        
        Public Event CheckInsRowChanged As CheckInsRowChangeEventHandler
        
        Public Event CheckInsRowDeleting As CheckInsRowChangeEventHandler
        
        Public Event CheckInsRowDeleted As CheckInsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCheckInsRow(ByVal row As CheckInsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCheckInsRow(ByVal MemberID As Integer, ByVal FullName As String, ByVal FirstName As String, ByVal LastName As String, ByVal PaidType As Integer, ByVal PaidAmount As Decimal, ByVal PaidDate As Date, ByVal PaidDesc As String, ByVal DanceType As Integer, ByVal CreateDate As Date, ByVal ReferredBy As Integer) As CheckInsRow
            Dim rowCheckInsRow As CheckInsRow = CType(Me.NewRow,CheckInsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MemberID, FullName, FirstName, LastName, PaidType, PaidAmount, PaidDate, PaidDesc, DanceType, CreateDate, ReferredBy}
            rowCheckInsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCheckInsRow)
            Return rowCheckInsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCheckInID(ByVal CheckInID As Integer) As CheckInsRow
            Return CType(Me.Rows.Find(New Object() {CheckInID}),CheckInsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CheckInsDataTable = CType(MyBase.Clone,CheckInsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CheckInsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCheckInID = MyBase.Columns("CheckInID")
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFullName = MyBase.Columns("FullName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnPaidType = MyBase.Columns("PaidType")
            Me.columnPaidAmount = MyBase.Columns("PaidAmount")
            Me.columnPaidDate = MyBase.Columns("PaidDate")
            Me.columnPaidDesc = MyBase.Columns("PaidDesc")
            Me.columnDanceType = MyBase.Columns("DanceType")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnReferredBy = MyBase.Columns("ReferredBy")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCheckInID = New Global.System.Data.DataColumn("CheckInID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckInID)
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFullName = New Global.System.Data.DataColumn("FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnPaidType = New Global.System.Data.DataColumn("PaidType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidType)
            Me.columnPaidAmount = New Global.System.Data.DataColumn("PaidAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidAmount)
            Me.columnPaidDate = New Global.System.Data.DataColumn("PaidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidDate)
            Me.columnPaidDesc = New Global.System.Data.DataColumn("PaidDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidDesc)
            Me.columnDanceType = New Global.System.Data.DataColumn("DanceType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDanceType)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnReferredBy = New Global.System.Data.DataColumn("ReferredBy", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferredBy)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCheckInID}, true))
            Me.columnCheckInID.AutoIncrement = true
            Me.columnCheckInID.AutoIncrementSeed = -1
            Me.columnCheckInID.AutoIncrementStep = -1
            Me.columnCheckInID.AllowDBNull = false
            Me.columnCheckInID.ReadOnly = true
            Me.columnCheckInID.Unique = true
            Me.columnFullName.MaxLength = 100
            Me.columnFirstName.MaxLength = 50
            Me.columnLastName.MaxLength = 50
            Me.columnPaidDesc.MaxLength = 50
            Me.columnDanceType.AllowDBNull = false
            Me.columnCreateDate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCheckInsRow() As CheckInsRow
            Return CType(Me.NewRow,CheckInsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CheckInsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CheckInsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CheckInsRowChangedEvent) Is Nothing) Then
                RaiseEvent CheckInsRowChanged(Me, New CheckInsRowChangeEvent(CType(e.Row,CheckInsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CheckInsRowChangingEvent) Is Nothing) Then
                RaiseEvent CheckInsRowChanging(Me, New CheckInsRowChangeEvent(CType(e.Row,CheckInsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CheckInsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CheckInsRowDeleted(Me, New CheckInsRowChangeEvent(CType(e.Row,CheckInsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CheckInsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CheckInsRowDeleting(Me, New CheckInsRowChangeEvent(CType(e.Row,CheckInsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCheckInsRow(ByVal row As CheckInsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CheckInsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContestantsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnContestantID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnPostalCode As Global.System.Data.DataColumn
        
        Private columnPhoneNumber As Global.System.Data.DataColumn
        
        Private columnEmailName As Global.System.Data.DataColumn
        
        Private columnContestantNumber As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnClubID As Global.System.Data.DataColumn
        
        Private columnPaidID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contestants"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContestantIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContestantID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhoneNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContestantNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContestantNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClubIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClubID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContestantsRow
            Get
                Return CType(Me.Rows(index),ContestantsRow)
            End Get
        End Property
        
        Public Event ContestantsRowChanging As ContestantsRowChangeEventHandler
        
        Public Event ContestantsRowChanged As ContestantsRowChangeEventHandler
        
        Public Event ContestantsRowDeleting As ContestantsRowChangeEventHandler
        
        Public Event ContestantsRowDeleted As ContestantsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContestantsRow(ByVal row As ContestantsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContestantsRow(ByVal ContestantID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal PostalCode As String, ByVal PhoneNumber As String, ByVal EmailName As String, ByVal ContestantNumber As String, ByVal Notes As String, ByVal ClubID As Integer, ByVal PaidID As Integer) As ContestantsRow
            Dim rowContestantsRow As ContestantsRow = CType(Me.NewRow,ContestantsRow)
            Dim columnValuesArray() As Object = New Object() {ContestantID, FirstName, LastName, Address, City, State, PostalCode, PhoneNumber, EmailName, ContestantNumber, Notes, ClubID, PaidID}
            rowContestantsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContestantsRow)
            Return rowContestantsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ContestantsDataTable = CType(MyBase.Clone,ContestantsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ContestantsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnContestantID = MyBase.Columns("ContestantID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnPostalCode = MyBase.Columns("PostalCode")
            Me.columnPhoneNumber = MyBase.Columns("PhoneNumber")
            Me.columnEmailName = MyBase.Columns("EmailName")
            Me.columnContestantNumber = MyBase.Columns("ContestantNumber")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnClubID = MyBase.Columns("ClubID")
            Me.columnPaidID = MyBase.Columns("PaidID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnContestantID = New Global.System.Data.DataColumn("ContestantID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContestantID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCode)
            Me.columnPhoneNumber = New Global.System.Data.DataColumn("PhoneNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoneNumber)
            Me.columnEmailName = New Global.System.Data.DataColumn("EmailName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailName)
            Me.columnContestantNumber = New Global.System.Data.DataColumn("ContestantNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContestantNumber)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnClubID = New Global.System.Data.DataColumn("ClubID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClubID)
            Me.columnPaidID = New Global.System.Data.DataColumn("PaidID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidID)
            Me.columnContestantID.AllowDBNull = false
            Me.columnFirstName.MaxLength = 50
            Me.columnLastName.MaxLength = 50
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 50
            Me.columnState.MaxLength = 20
            Me.columnPostalCode.MaxLength = 20
            Me.columnPhoneNumber.MaxLength = 30
            Me.columnEmailName.MaxLength = 50
            Me.columnContestantNumber.MaxLength = 30
            Me.columnNotes.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContestantsRow() As ContestantsRow
            Return CType(Me.NewRow,ContestantsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ContestantsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ContestantsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContestantsRowChangedEvent) Is Nothing) Then
                RaiseEvent ContestantsRowChanged(Me, New ContestantsRowChangeEvent(CType(e.Row,ContestantsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContestantsRowChangingEvent) Is Nothing) Then
                RaiseEvent ContestantsRowChanging(Me, New ContestantsRowChangeEvent(CType(e.Row,ContestantsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContestantsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContestantsRowDeleted(Me, New ContestantsRowChangeEvent(CType(e.Row,ContestantsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContestantsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContestantsRowDeleting(Me, New ContestantsRowChangeEvent(CType(e.Row,ContestantsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContestantsRow(ByVal row As ContestantsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContestantsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OKSwingMemberListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnClassID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OKSwingMemberList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OKSwingMemberListRow
            Get
                Return CType(Me.Rows(index),OKSwingMemberListRow)
            End Get
        End Property
        
        Public Event OKSwingMemberListRowChanging As OKSwingMemberListRowChangeEventHandler
        
        Public Event OKSwingMemberListRowChanged As OKSwingMemberListRowChangeEventHandler
        
        Public Event OKSwingMemberListRowDeleting As OKSwingMemberListRowChangeEventHandler
        
        Public Event OKSwingMemberListRowDeleted As OKSwingMemberListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOKSwingMemberListRow(ByVal row As OKSwingMemberListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOKSwingMemberListRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer) As OKSwingMemberListRow
            Dim rowOKSwingMemberListRow As OKSwingMemberListRow = CType(Me.NewRow,OKSwingMemberListRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID}
            rowOKSwingMemberListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOKSwingMemberListRow)
            Return rowOKSwingMemberListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As OKSwingMemberListRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),OKSwingMemberListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OKSwingMemberListDataTable = CType(MyBase.Clone,OKSwingMemberListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OKSwingMemberListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnClassID = MyBase.Columns("ClassID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnClassID = New Global.System.Data.DataColumn("ClassID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
            Me.columnIsDeleted.AllowDBNull = false
            Me.columnClassID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOKSwingMemberListRow() As OKSwingMemberListRow
            Return CType(Me.NewRow,OKSwingMemberListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OKSwingMemberListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OKSwingMemberListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OKSwingMemberListRowChangedEvent) Is Nothing) Then
                RaiseEvent OKSwingMemberListRowChanged(Me, New OKSwingMemberListRowChangeEvent(CType(e.Row,OKSwingMemberListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OKSwingMemberListRowChangingEvent) Is Nothing) Then
                RaiseEvent OKSwingMemberListRowChanging(Me, New OKSwingMemberListRowChangeEvent(CType(e.Row,OKSwingMemberListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OKSwingMemberListRowDeletedEvent) Is Nothing) Then
                RaiseEvent OKSwingMemberListRowDeleted(Me, New OKSwingMemberListRowChangeEvent(CType(e.Row,OKSwingMemberListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OKSwingMemberListRowDeletingEvent) Is Nothing) Then
                RaiseEvent OKSwingMemberListRowDeleting(Me, New OKSwingMemberListRowChangeEvent(CType(e.Row,OKSwingMemberListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOKSwingMemberListRow(ByVal row As OKSwingMemberListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OKSwingMemberListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblFeesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFeeID As Global.System.Data.DataColumn
        
        Private columnFeeCode As Global.System.Data.DataColumn
        
        Private columnFeeAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblFees"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeeAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeeAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFeesRow
            Get
                Return CType(Me.Rows(index),tblFeesRow)
            End Get
        End Property
        
        Public Event tblFeesRowChanging As tblFeesRowChangeEventHandler
        
        Public Event tblFeesRowChanged As tblFeesRowChangeEventHandler
        
        Public Event tblFeesRowDeleting As tblFeesRowChangeEventHandler
        
        Public Event tblFeesRowDeleted As tblFeesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblFeesRow(ByVal row As tblFeesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblFeesRow(ByVal FeeID As Integer, ByVal FeeCode As String, ByVal FeeAmount As Decimal) As tblFeesRow
            Dim rowtblFeesRow As tblFeesRow = CType(Me.NewRow,tblFeesRow)
            Dim columnValuesArray() As Object = New Object() {FeeID, FeeCode, FeeAmount}
            rowtblFeesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblFeesRow)
            Return rowtblFeesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblFeesDataTable = CType(MyBase.Clone,tblFeesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblFeesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFeeID = MyBase.Columns("FeeID")
            Me.columnFeeCode = MyBase.Columns("FeeCode")
            Me.columnFeeAmount = MyBase.Columns("FeeAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFeeID = New Global.System.Data.DataColumn("FeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeeID)
            Me.columnFeeCode = New Global.System.Data.DataColumn("FeeCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeeCode)
            Me.columnFeeAmount = New Global.System.Data.DataColumn("FeeAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeeAmount)
            Me.columnFeeID.AllowDBNull = false
            Me.columnFeeCode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblFeesRow() As tblFeesRow
            Return CType(Me.NewRow,tblFeesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblFeesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblFeesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFeesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFeesRowChanged(Me, New tblFeesRowChangeEvent(CType(e.Row,tblFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFeesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFeesRowChanging(Me, New tblFeesRowChangeEvent(CType(e.Row,tblFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFeesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFeesRowDeleted(Me, New tblFeesRowChangeEvent(CType(e.Row,tblFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFeesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFeesRowDeleting(Me, New tblFeesRowChangeEvent(CType(e.Row,tblFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblFeesRow(ByVal row As tblFeesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblFeesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ActiveMembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnClassID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ActiveMembers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActiveMembersRow
            Get
                Return CType(Me.Rows(index),ActiveMembersRow)
            End Get
        End Property
        
        Public Event ActiveMembersRowChanging As ActiveMembersRowChangeEventHandler
        
        Public Event ActiveMembersRowChanged As ActiveMembersRowChangeEventHandler
        
        Public Event ActiveMembersRowDeleting As ActiveMembersRowChangeEventHandler
        
        Public Event ActiveMembersRowDeleted As ActiveMembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddActiveMembersRow(ByVal row As ActiveMembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActiveMembersRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer) As ActiveMembersRow
            Dim rowActiveMembersRow As ActiveMembersRow = CType(Me.NewRow,ActiveMembersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID}
            rowActiveMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActiveMembersRow)
            Return rowActiveMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As ActiveMembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),ActiveMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ActiveMembersDataTable = CType(MyBase.Clone,ActiveMembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ActiveMembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnClassID = MyBase.Columns("ClassID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnClassID = New Global.System.Data.DataColumn("ClassID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
            Me.columnIsDeleted.AllowDBNull = false
            Me.columnClassID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewActiveMembersRow() As ActiveMembersRow
            Return CType(Me.NewRow,ActiveMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ActiveMembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ActiveMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActiveMembersRowChangedEvent) Is Nothing) Then
                RaiseEvent ActiveMembersRowChanged(Me, New ActiveMembersRowChangeEvent(CType(e.Row,ActiveMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActiveMembersRowChangingEvent) Is Nothing) Then
                RaiseEvent ActiveMembersRowChanging(Me, New ActiveMembersRowChangeEvent(CType(e.Row,ActiveMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActiveMembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActiveMembersRowDeleted(Me, New ActiveMembersRowChangeEvent(CType(e.Row,ActiveMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActiveMembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActiveMembersRowDeleting(Me, New ActiveMembersRowChangeEvent(CType(e.Row,ActiveMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveActiveMembersRow(ByVal row As ActiveMembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ActiveMembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExpiringMembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ExpiringMembers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExpiringMembersRow
            Get
                Return CType(Me.Rows(index),ExpiringMembersRow)
            End Get
        End Property
        
        Public Event ExpiringMembersRowChanging As ExpiringMembersRowChangeEventHandler
        
        Public Event ExpiringMembersRowChanged As ExpiringMembersRowChangeEventHandler
        
        Public Event ExpiringMembersRowDeleting As ExpiringMembersRowChangeEventHandler
        
        Public Event ExpiringMembersRowDeleted As ExpiringMembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExpiringMembersRow(ByVal row As ExpiringMembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExpiringMembersRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean) As ExpiringMembersRow
            Dim rowExpiringMembersRow As ExpiringMembersRow = CType(Me.NewRow,ExpiringMembersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress}
            rowExpiringMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExpiringMembersRow)
            Return rowExpiringMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As ExpiringMembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),ExpiringMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExpiringMembersDataTable = CType(MyBase.Clone,ExpiringMembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExpiringMembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExpiringMembersRow() As ExpiringMembersRow
            Return CType(Me.NewRow,ExpiringMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExpiringMembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExpiringMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExpiringMembersRowChangedEvent) Is Nothing) Then
                RaiseEvent ExpiringMembersRowChanged(Me, New ExpiringMembersRowChangeEvent(CType(e.Row,ExpiringMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExpiringMembersRowChangingEvent) Is Nothing) Then
                RaiseEvent ExpiringMembersRowChanging(Me, New ExpiringMembersRowChangeEvent(CType(e.Row,ExpiringMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExpiringMembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExpiringMembersRowDeleted(Me, New ExpiringMembersRowChangeEvent(CType(e.Row,ExpiringMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExpiringMembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExpiringMembersRowDeleting(Me, New ExpiringMembersRowChangeEvent(CType(e.Row,ExpiringMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExpiringMembersRow(ByVal row As ExpiringMembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExpiringMembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Members"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MembersRow
            Get
                Return CType(Me.Rows(index),MembersRow)
            End Get
        End Property
        
        Public Event MembersRowChanging As MembersRowChangeEventHandler
        
        Public Event MembersRowChanged As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleting As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleted As MembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMembersRow(ByVal row As MembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMembersRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean) As MembersRow
            Dim rowMembersRow As MembersRow = CType(Me.NewRow,MembersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress}
            rowMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMembersRow)
            Return rowMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As MembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),MembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MembersDataTable = CType(MyBase.Clone,MembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMembersRow() As MembersRow
            Return CType(Me.NewRow,MembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MembersRowChangedEvent) Is Nothing) Then
                RaiseEvent MembersRowChanged(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MembersRowChangingEvent) Is Nothing) Then
                RaiseEvent MembersRowChanging(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleted(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleting(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMembersRow(ByVal row As MembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MissingMembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MissingMembers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MissingMembersRow
            Get
                Return CType(Me.Rows(index),MissingMembersRow)
            End Get
        End Property
        
        Public Event MissingMembersRowChanging As MissingMembersRowChangeEventHandler
        
        Public Event MissingMembersRowChanged As MissingMembersRowChangeEventHandler
        
        Public Event MissingMembersRowDeleting As MissingMembersRowChangeEventHandler
        
        Public Event MissingMembersRowDeleted As MissingMembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMissingMembersRow(ByVal row As MissingMembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMissingMembersRow( _
                    ByVal MemberID As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String) As MissingMembersRow
            Dim rowMissingMembersRow As MissingMembersRow = CType(Me.NewRow,MissingMembersRow)
            Dim columnValuesArray() As Object = New Object() {MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone}
            rowMissingMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMissingMembersRow)
            Return rowMissingMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As MissingMembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),MissingMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MissingMembersDataTable = CType(MyBase.Clone,MissingMembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MissingMembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMissingMembersRow() As MissingMembersRow
            Return CType(Me.NewRow,MissingMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MissingMembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MissingMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MissingMembersRowChangedEvent) Is Nothing) Then
                RaiseEvent MissingMembersRowChanged(Me, New MissingMembersRowChangeEvent(CType(e.Row,MissingMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MissingMembersRowChangingEvent) Is Nothing) Then
                RaiseEvent MissingMembersRowChanging(Me, New MissingMembersRowChangeEvent(CType(e.Row,MissingMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MissingMembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent MissingMembersRowDeleted(Me, New MissingMembersRowChangeEvent(CType(e.Row,MissingMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MissingMembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent MissingMembersRowDeleting(Me, New MissingMembersRowChangeEvent(CType(e.Row,MissingMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMissingMembersRow(ByVal row As MissingMembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MissingMembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NewMembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NewMembers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NewMembersRow
            Get
                Return CType(Me.Rows(index),NewMembersRow)
            End Get
        End Property
        
        Public Event NewMembersRowChanging As NewMembersRowChangeEventHandler
        
        Public Event NewMembersRowChanged As NewMembersRowChangeEventHandler
        
        Public Event NewMembersRowDeleting As NewMembersRowChangeEventHandler
        
        Public Event NewMembersRowDeleted As NewMembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNewMembersRow(ByVal row As NewMembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNewMembersRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean) As NewMembersRow
            Dim rowNewMembersRow As NewMembersRow = CType(Me.NewRow,NewMembersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress}
            rowNewMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNewMembersRow)
            Return rowNewMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As NewMembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),NewMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NewMembersDataTable = CType(MyBase.Clone,NewMembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NewMembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNewMembersRow() As NewMembersRow
            Return CType(Me.NewRow,NewMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NewMembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NewMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NewMembersRowChangedEvent) Is Nothing) Then
                RaiseEvent NewMembersRowChanged(Me, New NewMembersRowChangeEvent(CType(e.Row,NewMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NewMembersRowChangingEvent) Is Nothing) Then
                RaiseEvent NewMembersRowChanging(Me, New NewMembersRowChangeEvent(CType(e.Row,NewMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NewMembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent NewMembersRowDeleted(Me, New NewMembersRowChangeEvent(CType(e.Row,NewMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NewMembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent NewMembersRowDeleting(Me, New NewMembersRowChangeEvent(CType(e.Row,NewMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNewMembersRow(ByVal row As NewMembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NewMembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NextMonthBirthdaysDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnClassID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NextMonthBirthdays"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NextMonthBirthdaysRow
            Get
                Return CType(Me.Rows(index),NextMonthBirthdaysRow)
            End Get
        End Property
        
        Public Event NextMonthBirthdaysRowChanging As NextMonthBirthdaysRowChangeEventHandler
        
        Public Event NextMonthBirthdaysRowChanged As NextMonthBirthdaysRowChangeEventHandler
        
        Public Event NextMonthBirthdaysRowDeleting As NextMonthBirthdaysRowChangeEventHandler
        
        Public Event NextMonthBirthdaysRowDeleted As NextMonthBirthdaysRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNextMonthBirthdaysRow(ByVal row As NextMonthBirthdaysRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNextMonthBirthdaysRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer) As NextMonthBirthdaysRow
            Dim rowNextMonthBirthdaysRow As NextMonthBirthdaysRow = CType(Me.NewRow,NextMonthBirthdaysRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID}
            rowNextMonthBirthdaysRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNextMonthBirthdaysRow)
            Return rowNextMonthBirthdaysRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As NextMonthBirthdaysRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),NextMonthBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NextMonthBirthdaysDataTable = CType(MyBase.Clone,NextMonthBirthdaysDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NextMonthBirthdaysDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnClassID = MyBase.Columns("ClassID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnClassID = New Global.System.Data.DataColumn("ClassID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
            Me.columnIsDeleted.AllowDBNull = false
            Me.columnClassID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNextMonthBirthdaysRow() As NextMonthBirthdaysRow
            Return CType(Me.NewRow,NextMonthBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NextMonthBirthdaysRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NextMonthBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NextMonthBirthdaysRowChangedEvent) Is Nothing) Then
                RaiseEvent NextMonthBirthdaysRowChanged(Me, New NextMonthBirthdaysRowChangeEvent(CType(e.Row,NextMonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NextMonthBirthdaysRowChangingEvent) Is Nothing) Then
                RaiseEvent NextMonthBirthdaysRowChanging(Me, New NextMonthBirthdaysRowChangeEvent(CType(e.Row,NextMonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NextMonthBirthdaysRowDeletedEvent) Is Nothing) Then
                RaiseEvent NextMonthBirthdaysRowDeleted(Me, New NextMonthBirthdaysRowChangeEvent(CType(e.Row,NextMonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NextMonthBirthdaysRowDeletingEvent) Is Nothing) Then
                RaiseEvent NextMonthBirthdaysRowDeleting(Me, New NextMonthBirthdaysRowChangeEvent(CType(e.Row,NextMonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNextMonthBirthdaysRow(ByVal row As NextMonthBirthdaysRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NextMonthBirthdaysDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ThankYouMembersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ThankYouMembers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ThankYouMembersRow
            Get
                Return CType(Me.Rows(index),ThankYouMembersRow)
            End Get
        End Property
        
        Public Event ThankYouMembersRowChanging As ThankYouMembersRowChangeEventHandler
        
        Public Event ThankYouMembersRowChanged As ThankYouMembersRowChangeEventHandler
        
        Public Event ThankYouMembersRowDeleting As ThankYouMembersRowChangeEventHandler
        
        Public Event ThankYouMembersRowDeleted As ThankYouMembersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddThankYouMembersRow(ByVal row As ThankYouMembersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddThankYouMembersRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean) As ThankYouMembersRow
            Dim rowThankYouMembersRow As ThankYouMembersRow = CType(Me.NewRow,ThankYouMembersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress}
            rowThankYouMembersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowThankYouMembersRow)
            Return rowThankYouMembersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As ThankYouMembersRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),ThankYouMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ThankYouMembersDataTable = CType(MyBase.Clone,ThankYouMembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ThankYouMembersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AutoIncrementSeed = -1
            Me.columnMemberID.AutoIncrementStep = -1
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewThankYouMembersRow() As ThankYouMembersRow
            Return CType(Me.NewRow,ThankYouMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ThankYouMembersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ThankYouMembersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ThankYouMembersRowChangedEvent) Is Nothing) Then
                RaiseEvent ThankYouMembersRowChanged(Me, New ThankYouMembersRowChangeEvent(CType(e.Row,ThankYouMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ThankYouMembersRowChangingEvent) Is Nothing) Then
                RaiseEvent ThankYouMembersRowChanging(Me, New ThankYouMembersRowChangeEvent(CType(e.Row,ThankYouMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ThankYouMembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ThankYouMembersRowDeleted(Me, New ThankYouMembersRowChangeEvent(CType(e.Row,ThankYouMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ThankYouMembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ThankYouMembersRowDeleting(Me, New ThankYouMembersRowChangeEvent(CType(e.Row,ThankYouMembersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveThankYouMembersRow(ByVal row As ThankYouMembersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ThankYouMembersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MemberBirthdaysDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnWorkPhone As Global.System.Data.DataColumn
        
        Private columnFaxNumber As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDateJoined As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnLastPaid As Global.System.Data.DataColumn
        
        Private columnDues As Global.System.Data.DataColumn
        
        Private columnInputDate As Global.System.Data.DataColumn
        
        Private columnMemberStatus As Global.System.Data.DataColumn
        
        Private columnOrganization As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnDataEaseMemberNumber As Global.System.Data.DataColumn
        
        Private columnBirthMonth As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnCharter As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnDateLastUpdated As Global.System.Data.DataColumn
        
        Private columnLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnDateadded As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCellPhone As Global.System.Data.DataColumn
        
        Private columnInvalidAddress As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnClassID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MemberBirthdays"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateJoinedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateJoined
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataEaseMemberNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataEaseMemberNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CharterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateLastUpdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateLastUpdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateaddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateadded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvalidAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvalidAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MemberBirthdaysRow
            Get
                Return CType(Me.Rows(index),MemberBirthdaysRow)
            End Get
        End Property
        
        Public Event MemberBirthdaysRowChanging As MemberBirthdaysRowChangeEventHandler
        
        Public Event MemberBirthdaysRowChanged As MemberBirthdaysRowChangeEventHandler
        
        Public Event MemberBirthdaysRowDeleting As MemberBirthdaysRowChangeEventHandler
        
        Public Event MemberBirthdaysRowDeleted As MemberBirthdaysRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMemberBirthdaysRow(ByVal row As MemberBirthdaysRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMemberBirthdaysRow( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Decimal,  _
                    ByVal InputDate As Date,  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Date,  _
                    ByVal Anniversary As Date,  _
                    ByVal DataEaseMemberNumber As Double,  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Date,  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer) As MemberBirthdaysRow
            Dim rowMemberBirthdaysRow As MemberBirthdaysRow = CType(Me.NewRow,MemberBirthdaysRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID}
            rowMemberBirthdaysRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMemberBirthdaysRow)
            Return rowMemberBirthdaysRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberID(ByVal MemberID As Integer) As MemberBirthdaysRow
            Return CType(Me.Rows.Find(New Object() {MemberID}),MemberBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MemberBirthdaysDataTable = CType(MyBase.Clone,MemberBirthdaysDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MemberBirthdaysDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberID = MyBase.Columns("MemberID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnWorkPhone = MyBase.Columns("WorkPhone")
            Me.columnFaxNumber = MyBase.Columns("FaxNumber")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDateJoined = MyBase.Columns("DateJoined")
            Me.columnType = MyBase.Columns("Type")
            Me.columnLastPaid = MyBase.Columns("LastPaid")
            Me.columnDues = MyBase.Columns("Dues")
            Me.columnInputDate = MyBase.Columns("InputDate")
            Me.columnMemberStatus = MyBase.Columns("MemberStatus")
            Me.columnOrganization = MyBase.Columns("Organization")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnDataEaseMemberNumber = MyBase.Columns("DataEaseMemberNumber")
            Me.columnBirthMonth = MyBase.Columns("BirthMonth")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnCharter = MyBase.Columns("Charter")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnDateLastUpdated = MyBase.Columns("DateLastUpdated")
            Me.columnLastUpdatedBy = MyBase.Columns("LastUpdatedBy")
            Me.columnDateadded = MyBase.Columns("Dateadded")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCellPhone = MyBase.Columns("CellPhone")
            Me.columnInvalidAddress = MyBase.Columns("InvalidAddress")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnClassID = MyBase.Columns("ClassID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnWorkPhone = New Global.System.Data.DataColumn("WorkPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPhone)
            Me.columnFaxNumber = New Global.System.Data.DataColumn("FaxNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNumber)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDateJoined = New Global.System.Data.DataColumn("DateJoined", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateJoined)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnLastPaid = New Global.System.Data.DataColumn("LastPaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaid)
            Me.columnDues = New Global.System.Data.DataColumn("Dues", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues)
            Me.columnInputDate = New Global.System.Data.DataColumn("InputDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputDate)
            Me.columnMemberStatus = New Global.System.Data.DataColumn("MemberStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberStatus)
            Me.columnOrganization = New Global.System.Data.DataColumn("Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganization)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnDataEaseMemberNumber = New Global.System.Data.DataColumn("DataEaseMemberNumber", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataEaseMemberNumber)
            Me.columnBirthMonth = New Global.System.Data.DataColumn("BirthMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthMonth)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnCharter = New Global.System.Data.DataColumn("Charter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharter)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnDateLastUpdated = New Global.System.Data.DataColumn("DateLastUpdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateLastUpdated)
            Me.columnLastUpdatedBy = New Global.System.Data.DataColumn("LastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastUpdatedBy)
            Me.columnDateadded = New Global.System.Data.DataColumn("Dateadded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateadded)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCellPhone = New Global.System.Data.DataColumn("CellPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellPhone)
            Me.columnInvalidAddress = New Global.System.Data.DataColumn("InvalidAddress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvalidAddress)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnClassID = New Global.System.Data.DataColumn("ClassID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberID}, true))
            Me.columnMemberID.AutoIncrement = true
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.ReadOnly = true
            Me.columnMemberID.Unique = true
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnWorkPhone.MaxLength = 255
            Me.columnFaxNumber.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnDateJoined.MaxLength = 255
            Me.columnType.MaxLength = 255
            Me.columnLastPaid.MaxLength = 255
            Me.columnMemberStatus.MaxLength = 255
            Me.columnOrganization.MaxLength = 255
            Me.columnBirthMonth.MaxLength = 255
            Me.columnBirthDay.MaxLength = 255
            Me.columnCharter.AllowDBNull = false
            Me.columnNewMemberDate.AllowDBNull = false
            Me.columnLastUpdatedBy.MaxLength = 255
            Me.columnDateadded.AllowDBNull = false
            Me.columnDateadded.MaxLength = 255
            Me.columnAddedBy.MaxLength = 255
            Me.columnComments.MaxLength = 255
            Me.columnCellPhone.MaxLength = 255
            Me.columnInvalidAddress.AllowDBNull = false
            Me.columnIsDeleted.AllowDBNull = false
            Me.columnClassID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMemberBirthdaysRow() As MemberBirthdaysRow
            Return CType(Me.NewRow,MemberBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MemberBirthdaysRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MemberBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MemberBirthdaysRowChangedEvent) Is Nothing) Then
                RaiseEvent MemberBirthdaysRowChanged(Me, New MemberBirthdaysRowChangeEvent(CType(e.Row,MemberBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MemberBirthdaysRowChangingEvent) Is Nothing) Then
                RaiseEvent MemberBirthdaysRowChanging(Me, New MemberBirthdaysRowChangeEvent(CType(e.Row,MemberBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MemberBirthdaysRowDeletedEvent) Is Nothing) Then
                RaiseEvent MemberBirthdaysRowDeleted(Me, New MemberBirthdaysRowChangeEvent(CType(e.Row,MemberBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MemberBirthdaysRowDeletingEvent) Is Nothing) Then
                RaiseEvent MemberBirthdaysRowDeleting(Me, New MemberBirthdaysRowChangeEvent(CType(e.Row,MemberBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMemberBirthdaysRow(ByVal row As MemberBirthdaysRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MemberBirthdaysDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NewPinkDancersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNew_Dancer As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NewPinkDancers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property New_DancerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNew_Dancer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NewPinkDancersRow
            Get
                Return CType(Me.Rows(index),NewPinkDancersRow)
            End Get
        End Property
        
        Public Event NewPinkDancersRowChanging As NewPinkDancersRowChangeEventHandler
        
        Public Event NewPinkDancersRowChanged As NewPinkDancersRowChangeEventHandler
        
        Public Event NewPinkDancersRowDeleting As NewPinkDancersRowChangeEventHandler
        
        Public Event NewPinkDancersRowDeleted As NewPinkDancersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNewPinkDancersRow(ByVal row As NewPinkDancersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNewPinkDancersRow(ByVal New_Dancer As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal HomePhone As String, ByVal EmailAddress As String, ByVal Type As String) As NewPinkDancersRow
            Dim rowNewPinkDancersRow As NewPinkDancersRow = CType(Me.NewRow,NewPinkDancersRow)
            Dim columnValuesArray() As Object = New Object() {New_Dancer, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, EmailAddress, Type}
            rowNewPinkDancersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNewPinkDancersRow)
            Return rowNewPinkDancersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NewPinkDancersDataTable = CType(MyBase.Clone,NewPinkDancersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NewPinkDancersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNew_Dancer = MyBase.Columns("New Dancer")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNew_Dancer = New Global.System.Data.DataColumn("New Dancer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNew_Dancer)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNew_Dancer.ReadOnly = true
            Me.columnNew_Dancer.MaxLength = 10
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNewPinkDancersRow() As NewPinkDancersRow
            Return CType(Me.NewRow,NewPinkDancersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NewPinkDancersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NewPinkDancersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NewPinkDancersRowChangedEvent) Is Nothing) Then
                RaiseEvent NewPinkDancersRowChanged(Me, New NewPinkDancersRowChangeEvent(CType(e.Row,NewPinkDancersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NewPinkDancersRowChangingEvent) Is Nothing) Then
                RaiseEvent NewPinkDancersRowChanging(Me, New NewPinkDancersRowChangeEvent(CType(e.Row,NewPinkDancersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NewPinkDancersRowDeletedEvent) Is Nothing) Then
                RaiseEvent NewPinkDancersRowDeleted(Me, New NewPinkDancersRowChangeEvent(CType(e.Row,NewPinkDancersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NewPinkDancersRowDeletingEvent) Is Nothing) Then
                RaiseEvent NewPinkDancersRowDeleting(Me, New NewPinkDancersRowChangeEvent(CType(e.Row,NewPinkDancersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNewPinkDancersRow(ByVal row As NewPinkDancersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NewPinkDancersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Next3MonthBirthdaysDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columnB_Days As Global.System.Data.DataColumn
        
        Private columnBirthDay As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Next3MonthBirthdays"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_DaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_Days
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Next3MonthBirthdaysRow
            Get
                Return CType(Me.Rows(index),Next3MonthBirthdaysRow)
            End Get
        End Property
        
        Public Event Next3MonthBirthdaysRowChanging As Next3MonthBirthdaysRowChangeEventHandler
        
        Public Event Next3MonthBirthdaysRowChanged As Next3MonthBirthdaysRowChangeEventHandler
        
        Public Event Next3MonthBirthdaysRowDeleting As Next3MonthBirthdaysRowChangeEventHandler
        
        Public Event Next3MonthBirthdaysRowDeleted As Next3MonthBirthdaysRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNext3MonthBirthdaysRow(ByVal row As Next3MonthBirthdaysRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNext3MonthBirthdaysRow(ByVal _B_Days As String, ByVal BirthDay As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal HomePhone As String, ByVal EmailAddress As String, ByVal Type As String) As Next3MonthBirthdaysRow
            Dim rowNext3MonthBirthdaysRow As Next3MonthBirthdaysRow = CType(Me.NewRow,Next3MonthBirthdaysRow)
            Dim columnValuesArray() As Object = New Object() {_B_Days, BirthDay, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, EmailAddress, Type}
            rowNext3MonthBirthdaysRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNext3MonthBirthdaysRow)
            Return rowNext3MonthBirthdaysRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Next3MonthBirthdaysDataTable = CType(MyBase.Clone,Next3MonthBirthdaysDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Next3MonthBirthdaysDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnB_Days = MyBase.Columns("B-Days")
            Me.columnBirthDay = MyBase.Columns("BirthDay")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnB_Days = New Global.System.Data.DataColumn("B-Days", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_Days.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_Days")
            Me._columnB_Days.ExtendedProperties.Add("Generator_UserColumnName", "B-Days")
            MyBase.Columns.Add(Me._columnB_Days)
            Me.columnBirthDay = New Global.System.Data.DataColumn("BirthDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDay)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me._columnB_Days.ReadOnly = true
            Me._columnB_Days.MaxLength = 6
            Me.columnBirthDay.ReadOnly = true
            Me.columnBirthDay.MaxLength = 30
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNext3MonthBirthdaysRow() As Next3MonthBirthdaysRow
            Return CType(Me.NewRow,Next3MonthBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Next3MonthBirthdaysRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Next3MonthBirthdaysRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Next3MonthBirthdaysRowChangedEvent) Is Nothing) Then
                RaiseEvent Next3MonthBirthdaysRowChanged(Me, New Next3MonthBirthdaysRowChangeEvent(CType(e.Row,Next3MonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Next3MonthBirthdaysRowChangingEvent) Is Nothing) Then
                RaiseEvent Next3MonthBirthdaysRowChanging(Me, New Next3MonthBirthdaysRowChangeEvent(CType(e.Row,Next3MonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Next3MonthBirthdaysRowDeletedEvent) Is Nothing) Then
                RaiseEvent Next3MonthBirthdaysRowDeleted(Me, New Next3MonthBirthdaysRowChangeEvent(CType(e.Row,Next3MonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Next3MonthBirthdaysRowDeletingEvent) Is Nothing) Then
                RaiseEvent Next3MonthBirthdaysRowDeleting(Me, New Next3MonthBirthdaysRowChangeEvent(CType(e.Row,Next3MonthBirthdaysRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNext3MonthBirthdaysRow(ByVal row As Next3MonthBirthdaysRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Next3MonthBirthdaysDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PaidYearlyDuesLastMonthDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPaid_Dues As Global.System.Data.DataColumn
        
        Private columnNewMemberDate As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PaidYearlyDuesLastMonth"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Paid_DuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaid_Dues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewMemberDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewMemberDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PaidYearlyDuesLastMonthRow
            Get
                Return CType(Me.Rows(index),PaidYearlyDuesLastMonthRow)
            End Get
        End Property
        
        Public Event PaidYearlyDuesLastMonthRowChanging As PaidYearlyDuesLastMonthRowChangeEventHandler
        
        Public Event PaidYearlyDuesLastMonthRowChanged As PaidYearlyDuesLastMonthRowChangeEventHandler
        
        Public Event PaidYearlyDuesLastMonthRowDeleting As PaidYearlyDuesLastMonthRowChangeEventHandler
        
        Public Event PaidYearlyDuesLastMonthRowDeleted As PaidYearlyDuesLastMonthRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPaidYearlyDuesLastMonthRow(ByVal row As PaidYearlyDuesLastMonthRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPaidYearlyDuesLastMonthRow(ByVal Paid_Dues As String, ByVal NewMemberDate As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal HomePhone As String, ByVal EmailAddress As String, ByVal Type As String) As PaidYearlyDuesLastMonthRow
            Dim rowPaidYearlyDuesLastMonthRow As PaidYearlyDuesLastMonthRow = CType(Me.NewRow,PaidYearlyDuesLastMonthRow)
            Dim columnValuesArray() As Object = New Object() {Paid_Dues, NewMemberDate, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, EmailAddress, Type}
            rowPaidYearlyDuesLastMonthRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPaidYearlyDuesLastMonthRow)
            Return rowPaidYearlyDuesLastMonthRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PaidYearlyDuesLastMonthDataTable = CType(MyBase.Clone,PaidYearlyDuesLastMonthDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PaidYearlyDuesLastMonthDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPaid_Dues = MyBase.Columns("Paid Dues")
            Me.columnNewMemberDate = MyBase.Columns("NewMemberDate")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPaid_Dues = New Global.System.Data.DataColumn("Paid Dues", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaid_Dues)
            Me.columnNewMemberDate = New Global.System.Data.DataColumn("NewMemberDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewMemberDate)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnPaid_Dues.ReadOnly = true
            Me.columnPaid_Dues.MaxLength = 9
            Me.columnNewMemberDate.ReadOnly = true
            Me.columnNewMemberDate.MaxLength = 30
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPaidYearlyDuesLastMonthRow() As PaidYearlyDuesLastMonthRow
            Return CType(Me.NewRow,PaidYearlyDuesLastMonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PaidYearlyDuesLastMonthRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PaidYearlyDuesLastMonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PaidYearlyDuesLastMonthRowChangedEvent) Is Nothing) Then
                RaiseEvent PaidYearlyDuesLastMonthRowChanged(Me, New PaidYearlyDuesLastMonthRowChangeEvent(CType(e.Row,PaidYearlyDuesLastMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PaidYearlyDuesLastMonthRowChangingEvent) Is Nothing) Then
                RaiseEvent PaidYearlyDuesLastMonthRowChanging(Me, New PaidYearlyDuesLastMonthRowChangeEvent(CType(e.Row,PaidYearlyDuesLastMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PaidYearlyDuesLastMonthRowDeletedEvent) Is Nothing) Then
                RaiseEvent PaidYearlyDuesLastMonthRowDeleted(Me, New PaidYearlyDuesLastMonthRowChangeEvent(CType(e.Row,PaidYearlyDuesLastMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PaidYearlyDuesLastMonthRowDeletingEvent) Is Nothing) Then
                RaiseEvent PaidYearlyDuesLastMonthRowDeleting(Me, New PaidYearlyDuesLastMonthRowChangeEvent(CType(e.Row,PaidYearlyDuesLastMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePaidYearlyDuesLastMonthRow(ByVal row As PaidYearlyDuesLastMonthRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PaidYearlyDuesLastMonthDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class YearlyDuesSoonDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDues_Coming As Global.System.Data.DataColumn
        
        Private columnAnniversary As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnHomePhone As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "YearlyDuesSoon"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dues_ComingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDues_Coming
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnniversaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnniversary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearlyDuesSoonRow
            Get
                Return CType(Me.Rows(index),YearlyDuesSoonRow)
            End Get
        End Property
        
        Public Event YearlyDuesSoonRowChanging As YearlyDuesSoonRowChangeEventHandler
        
        Public Event YearlyDuesSoonRowChanged As YearlyDuesSoonRowChangeEventHandler
        
        Public Event YearlyDuesSoonRowDeleting As YearlyDuesSoonRowChangeEventHandler
        
        Public Event YearlyDuesSoonRowDeleted As YearlyDuesSoonRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddYearlyDuesSoonRow(ByVal row As YearlyDuesSoonRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddYearlyDuesSoonRow(ByVal Dues_Coming As String, ByVal Anniversary As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal HomePhone As String, ByVal EmailAddress As String, ByVal Type As String) As YearlyDuesSoonRow
            Dim rowYearlyDuesSoonRow As YearlyDuesSoonRow = CType(Me.NewRow,YearlyDuesSoonRow)
            Dim columnValuesArray() As Object = New Object() {Dues_Coming, Anniversary, FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, EmailAddress, Type}
            rowYearlyDuesSoonRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowYearlyDuesSoonRow)
            Return rowYearlyDuesSoonRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As YearlyDuesSoonDataTable = CType(MyBase.Clone,YearlyDuesSoonDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New YearlyDuesSoonDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDues_Coming = MyBase.Columns("Dues Coming")
            Me.columnAnniversary = MyBase.Columns("Anniversary")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnHomePhone = MyBase.Columns("HomePhone")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDues_Coming = New Global.System.Data.DataColumn("Dues Coming", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDues_Coming)
            Me.columnAnniversary = New Global.System.Data.DataColumn("Anniversary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnniversary)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomePhone)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnDues_Coming.ReadOnly = true
            Me.columnDues_Coming.MaxLength = 11
            Me.columnAnniversary.ReadOnly = true
            Me.columnAnniversary.MaxLength = 30
            Me.columnFirstName.MaxLength = 255
            Me.columnMiddleName.MaxLength = 255
            Me.columnLastName.MaxLength = 255
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 255
            Me.columnState.MaxLength = 255
            Me.columnZip.MaxLength = 255
            Me.columnHomePhone.MaxLength = 255
            Me.columnEmailAddress.MaxLength = 255
            Me.columnType.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewYearlyDuesSoonRow() As YearlyDuesSoonRow
            Return CType(Me.NewRow,YearlyDuesSoonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New YearlyDuesSoonRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(YearlyDuesSoonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearlyDuesSoonRowChangedEvent) Is Nothing) Then
                RaiseEvent YearlyDuesSoonRowChanged(Me, New YearlyDuesSoonRowChangeEvent(CType(e.Row,YearlyDuesSoonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearlyDuesSoonRowChangingEvent) Is Nothing) Then
                RaiseEvent YearlyDuesSoonRowChanging(Me, New YearlyDuesSoonRowChangeEvent(CType(e.Row,YearlyDuesSoonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearlyDuesSoonRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearlyDuesSoonRowDeleted(Me, New YearlyDuesSoonRowChangeEvent(CType(e.Row,YearlyDuesSoonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearlyDuesSoonRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearlyDuesSoonRowDeleting(Me, New YearlyDuesSoonRowChangeEvent(CType(e.Row,YearlyDuesSoonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveYearlyDuesSoonRow(ByVal row As YearlyDuesSoonRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SCCheckInDataSet = New SCCheckInDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "YearlyDuesSoonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CheckInsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCheckIns As CheckInsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheckIns = CType(Me.Table,CheckInsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckInID() As Integer
            Get
                Return CType(Me(Me.tableCheckIns.CheckInIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCheckIns.CheckInIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.MemberIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberID' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.FullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullName' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.FullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.PaidTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidType' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.PaidTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.PaidAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidAmount' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.PaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.PaidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidDate' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.PaidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.PaidDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidDesc' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.PaidDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DanceType() As Integer
            Get
                Return CType(Me(Me.tableCheckIns.DanceTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableCheckIns.DanceTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Return CType(Me(Me.tableCheckIns.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableCheckIns.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferredBy() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCheckIns.ReferredByColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferredBy' in table 'CheckIns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckIns.ReferredByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberIDNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.MemberIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberIDNull()
            Me(Me.tableCheckIns.MemberIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.FullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullNameNull()
            Me(Me.tableCheckIns.FullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableCheckIns.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableCheckIns.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidTypeNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.PaidTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidTypeNull()
            Me(Me.tableCheckIns.PaidTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidAmountNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.PaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidAmountNull()
            Me(Me.tableCheckIns.PaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidDateNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.PaidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidDateNull()
            Me(Me.tableCheckIns.PaidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidDescNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.PaidDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidDescNull()
            Me(Me.tableCheckIns.PaidDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferredByNull() As Boolean
            Return Me.IsNull(Me.tableCheckIns.ReferredByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferredByNull()
            Me(Me.tableCheckIns.ReferredByColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ContestantsRow
        Inherits Global.System.Data.DataRow
        
        Private tableContestants As ContestantsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContestants = CType(Me.Table,ContestantsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContestantID() As Integer
            Get
                Return CType(Me(Me.tableContestants.ContestantIDColumn),Integer)
            End Get
            Set
                Me(Me.tableContestants.ContestantIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.PostalCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.PostalCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhoneNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.PhoneNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhoneNumber' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.PhoneNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailName() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.EmailNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailName' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.EmailNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContestantNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.ContestantNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContestantNumber' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.ContestantNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableContestants.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClubID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableContestants.ClubIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClubID' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.ClubIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableContestants.PaidIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidID' in table 'Contestants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContestants.PaidIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableContestants.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableContestants.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableContestants.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableContestants.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableContestants.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableContestants.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableContestants.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableContestants.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableContestants.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableContestants.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableContestants.PostalCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostalCodeNull()
            Me(Me.tableContestants.PostalCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNumberNull() As Boolean
            Return Me.IsNull(Me.tableContestants.PhoneNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNumberNull()
            Me(Me.tableContestants.PhoneNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNameNull() As Boolean
            Return Me.IsNull(Me.tableContestants.EmailNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNameNull()
            Me(Me.tableContestants.EmailNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContestantNumberNull() As Boolean
            Return Me.IsNull(Me.tableContestants.ContestantNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContestantNumberNull()
            Me(Me.tableContestants.ContestantNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableContestants.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableContestants.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClubIDNull() As Boolean
            Return Me.IsNull(Me.tableContestants.ClubIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClubIDNull()
            Me(Me.tableContestants.ClubIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidIDNull() As Boolean
            Return Me.IsNull(Me.tableContestants.PaidIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidIDNull()
            Me(Me.tableContestants.PaidIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OKSwingMemberListRow
        Inherits Global.System.Data.DataRow
        
        Private tableOKSwingMemberList As OKSwingMemberListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOKSwingMemberList = CType(Me.Table,OKSwingMemberListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableOKSwingMemberList.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'OKSwingMemberList' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableOKSwingMemberList.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableOKSwingMemberList.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableOKSwingMemberList.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableOKSwingMemberList.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'OKSwingMemberList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOKSwingMemberList.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableOKSwingMemberList.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Return CType(Me(Me.tableOKSwingMemberList.IsDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassID() As Integer
            Get
                Return CType(Me(Me.tableOKSwingMemberList.ClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOKSwingMemberList.ClassIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableOKSwingMemberList.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableOKSwingMemberList.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableOKSwingMemberList.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableOKSwingMemberList.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableOKSwingMemberList.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableOKSwingMemberList.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableOKSwingMemberList.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableOKSwingMemberList.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableOKSwingMemberList.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableOKSwingMemberList.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableOKSwingMemberList.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableOKSwingMemberList.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableOKSwingMemberList.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableOKSwingMemberList.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableOKSwingMemberList.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableOKSwingMemberList.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableOKSwingMemberList.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableOKSwingMemberList.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableOKSwingMemberList.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableOKSwingMemberList.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableOKSwingMemberList.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableOKSwingMemberList.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableOKSwingMemberList.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableOKSwingMemberList.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableOKSwingMemberList.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableOKSwingMemberList.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableOKSwingMemberList.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableOKSwingMemberList.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableOKSwingMemberList.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableOKSwingMemberList.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblFeesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblFees As tblFeesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblFees = CType(Me.Table,tblFeesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FeeID() As Integer
            Get
                Return CType(Me(Me.tabletblFees.FeeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblFees.FeeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FeeCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFees.FeeCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FeeCode' in table 'tblFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFees.FeeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FeeAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblFees.FeeAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FeeAmount' in table 'tblFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFees.FeeAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFeeCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblFees.FeeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFeeCodeNull()
            Me(Me.tabletblFees.FeeCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFeeAmountNull() As Boolean
            Return Me.IsNull(Me.tabletblFees.FeeAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFeeAmountNull()
            Me(Me.tabletblFees.FeeAmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ActiveMembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableActiveMembers As ActiveMembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableActiveMembers = CType(Me.Table,ActiveMembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableActiveMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableActiveMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableActiveMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableActiveMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableActiveMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableActiveMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableActiveMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableActiveMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableActiveMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'ActiveMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActiveMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableActiveMembers.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableActiveMembers.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Return CType(Me(Me.tableActiveMembers.IsDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableActiveMembers.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassID() As Integer
            Get
                Return CType(Me(Me.tableActiveMembers.ClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableActiveMembers.ClassIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableActiveMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableActiveMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableActiveMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableActiveMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableActiveMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableActiveMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableActiveMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableActiveMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableActiveMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableActiveMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableActiveMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableActiveMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableActiveMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableActiveMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableActiveMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableActiveMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableActiveMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableActiveMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableActiveMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableActiveMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableActiveMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableActiveMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableActiveMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableActiveMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableActiveMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableActiveMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableActiveMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableActiveMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableActiveMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableActiveMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExpiringMembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableExpiringMembers As ExpiringMembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExpiringMembers = CType(Me.Table,ExpiringMembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableExpiringMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableExpiringMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'ExpiringMembers' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableExpiringMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableExpiringMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableExpiringMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableExpiringMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableExpiringMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableExpiringMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableExpiringMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'ExpiringMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExpiringMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableExpiringMembers.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableExpiringMembers.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableExpiringMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableExpiringMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableExpiringMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableExpiringMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableExpiringMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableExpiringMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableExpiringMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableExpiringMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableExpiringMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableExpiringMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableExpiringMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableExpiringMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableExpiringMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableExpiringMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableExpiringMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableExpiringMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableExpiringMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableExpiringMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableExpiringMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableExpiringMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableExpiringMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableExpiringMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableExpiringMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableExpiringMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableExpiringMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableExpiringMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableExpiringMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableExpiringMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableExpiringMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableExpiringMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableMembers As MembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMembers = CType(Me.Table,MembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'Members' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableMembers.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableMembers.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MissingMembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableMissingMembers As MissingMembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMissingMembers = CType(Me.Table,MissingMembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableMissingMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMissingMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableMissingMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableMissingMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableMissingMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableMissingMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableMissingMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableMissingMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMissingMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'MissingMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMissingMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableMissingMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableMissingMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableMissingMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableMissingMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableMissingMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableMissingMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableMissingMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableMissingMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableMissingMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableMissingMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableMissingMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableMissingMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableMissingMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableMissingMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableMissingMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableMissingMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableMissingMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableMissingMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableMissingMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableMissingMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableMissingMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableMissingMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableMissingMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableMissingMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableMissingMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableMissingMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableMissingMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableMissingMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMissingMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableMissingMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NewMembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableNewMembers As NewMembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNewMembers = CType(Me.Table,NewMembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableNewMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableNewMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableNewMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableNewMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableNewMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableNewMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableNewMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableNewMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'NewMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableNewMembers.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableNewMembers.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableNewMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableNewMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableNewMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableNewMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableNewMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableNewMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableNewMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableNewMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableNewMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableNewMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableNewMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableNewMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableNewMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableNewMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableNewMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableNewMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableNewMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableNewMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableNewMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableNewMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableNewMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableNewMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableNewMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableNewMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableNewMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableNewMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableNewMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableNewMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableNewMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableNewMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NextMonthBirthdaysRow
        Inherits Global.System.Data.DataRow
        
        Private tableNextMonthBirthdays As NextMonthBirthdaysDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNextMonthBirthdays = CType(Me.Table,NextMonthBirthdaysDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'NextMonthBirthdays' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNextMonthBirthdays.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'NextMonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.IsDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassID() As Integer
            Get
                Return CType(Me(Me.tableNextMonthBirthdays.ClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableNextMonthBirthdays.ClassIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableNextMonthBirthdays.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableNextMonthBirthdays.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableNextMonthBirthdays.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableNextMonthBirthdays.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableNextMonthBirthdays.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableNextMonthBirthdays.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableNextMonthBirthdays.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableNextMonthBirthdays.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableNextMonthBirthdays.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableNextMonthBirthdays.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableNextMonthBirthdays.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableNextMonthBirthdays.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableNextMonthBirthdays.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableNextMonthBirthdays.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableNextMonthBirthdays.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableNextMonthBirthdays.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableNextMonthBirthdays.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableNextMonthBirthdays.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableNextMonthBirthdays.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableNextMonthBirthdays.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableNextMonthBirthdays.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableNextMonthBirthdays.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableNextMonthBirthdays.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableNextMonthBirthdays.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableNextMonthBirthdays.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableNextMonthBirthdays.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableNextMonthBirthdays.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableNextMonthBirthdays.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableNextMonthBirthdays.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableNextMonthBirthdays.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ThankYouMembersRow
        Inherits Global.System.Data.DataRow
        
        Private tableThankYouMembers As ThankYouMembersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableThankYouMembers = CType(Me.Table,ThankYouMembersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableThankYouMembers.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableThankYouMembers.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'ThankYouMembers' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableThankYouMembers.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableThankYouMembers.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableThankYouMembers.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableThankYouMembers.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableThankYouMembers.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableThankYouMembers.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableThankYouMembers.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'ThankYouMembers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThankYouMembers.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableThankYouMembers.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableThankYouMembers.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableThankYouMembers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableThankYouMembers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableThankYouMembers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableThankYouMembers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableThankYouMembers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableThankYouMembers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableThankYouMembers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableThankYouMembers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableThankYouMembers.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableThankYouMembers.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableThankYouMembers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableThankYouMembers.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableThankYouMembers.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableThankYouMembers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableThankYouMembers.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableThankYouMembers.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableThankYouMembers.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableThankYouMembers.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableThankYouMembers.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableThankYouMembers.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableThankYouMembers.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableThankYouMembers.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableThankYouMembers.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableThankYouMembers.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableThankYouMembers.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableThankYouMembers.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableThankYouMembers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableThankYouMembers.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableThankYouMembers.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableThankYouMembers.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MemberBirthdaysRow
        Inherits Global.System.Data.DataRow
        
        Private tableMemberBirthdays As MemberBirthdaysDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMemberBirthdays = CType(Me.Table,MemberBirthdaysDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As Integer
            Get
                Return CType(Me(Me.tableMemberBirthdays.MemberIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMemberBirthdays.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.WorkPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkPhone' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.WorkPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.FaxNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNumber' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.FaxNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateJoined() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.DateJoinedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateJoined' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.DateJoinedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.LastPaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaid' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.LastPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.DuesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.InputDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputDate' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.InputDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.MemberStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberStatus' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.MemberStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organization' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.AnniversaryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataEaseMemberNumber() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.DataEaseMemberNumberColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataEaseMemberNumber' in table 'MemberBirthdays' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.DataEaseMemberNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.BirthMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthMonth' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.BirthMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Charter() As Boolean
            Get
                Return CType(Me(Me.tableMemberBirthdays.CharterColumn),Boolean)
            End Get
            Set
                Me(Me.tableMemberBirthdays.CharterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As Date
            Get
                Return CType(Me(Me.tableMemberBirthdays.NewMemberDateColumn),Date)
            End Get
            Set
                Me(Me.tableMemberBirthdays.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateLastUpdated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.DateLastUpdatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateLastUpdated' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.DateLastUpdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.LastUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastUpdatedBy' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.LastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dateadded() As String
            Get
                Return CType(Me(Me.tableMemberBirthdays.DateaddedColumn),String)
            End Get
            Set
                Me(Me.tableMemberBirthdays.DateaddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMemberBirthdays.CellPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellPhone' in table 'MemberBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemberBirthdays.CellPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvalidAddress() As Boolean
            Get
                Return CType(Me(Me.tableMemberBirthdays.InvalidAddressColumn),Boolean)
            End Get
            Set
                Me(Me.tableMemberBirthdays.InvalidAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Return CType(Me(Me.tableMemberBirthdays.IsDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableMemberBirthdays.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassID() As Integer
            Get
                Return CType(Me(Me.tableMemberBirthdays.ClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMemberBirthdays.ClassIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableMemberBirthdays.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableMemberBirthdays.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableMemberBirthdays.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableMemberBirthdays.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableMemberBirthdays.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableMemberBirthdays.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableMemberBirthdays.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableMemberBirthdays.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.WorkPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkPhoneNull()
            Me(Me.tableMemberBirthdays.WorkPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNumberNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.FaxNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNumberNull()
            Me(Me.tableMemberBirthdays.FaxNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableMemberBirthdays.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableMemberBirthdays.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateJoinedNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.DateJoinedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateJoinedNull()
            Me(Me.tableMemberBirthdays.DateJoinedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableMemberBirthdays.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.LastPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidNull()
            Me(Me.tableMemberBirthdays.LastPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuesNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuesNull()
            Me(Me.tableMemberBirthdays.DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputDateNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.InputDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputDateNull()
            Me(Me.tableMemberBirthdays.InputDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberStatusNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.MemberStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberStatusNull()
            Me(Me.tableMemberBirthdays.MemberStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizationNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizationNull()
            Me(Me.tableMemberBirthdays.OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableMemberBirthdays.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableMemberBirthdays.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataEaseMemberNumberNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.DataEaseMemberNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataEaseMemberNumberNull()
            Me(Me.tableMemberBirthdays.DataEaseMemberNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthMonthNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.BirthMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthMonthNull()
            Me(Me.tableMemberBirthdays.BirthMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableMemberBirthdays.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateLastUpdatedNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.DateLastUpdatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateLastUpdatedNull()
            Me(Me.tableMemberBirthdays.DateLastUpdatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.LastUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastUpdatedByNull()
            Me(Me.tableMemberBirthdays.LastUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableMemberBirthdays.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableMemberBirthdays.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMemberBirthdays.CellPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellPhoneNull()
            Me(Me.tableMemberBirthdays.CellPhoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NewPinkDancersRow
        Inherits Global.System.Data.DataRow
        
        Private tableNewPinkDancers As NewPinkDancersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNewPinkDancers = CType(Me.Table,NewPinkDancersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property New_Dancer() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.New_DancerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'New Dancer' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.New_DancerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableNewPinkDancers.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'NewPinkDancers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewPinkDancers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNew_DancerNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.New_DancerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNew_DancerNull()
            Me(Me.tableNewPinkDancers.New_DancerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableNewPinkDancers.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableNewPinkDancers.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableNewPinkDancers.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableNewPinkDancers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableNewPinkDancers.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableNewPinkDancers.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableNewPinkDancers.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableNewPinkDancers.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableNewPinkDancers.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableNewPinkDancers.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableNewPinkDancers.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Next3MonthBirthdaysRow
        Inherits Global.System.Data.DataRow
        
        Private tableNext3MonthBirthdays As Next3MonthBirthdaysDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNext3MonthBirthdays = CType(Me.Table,Next3MonthBirthdaysDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_Days() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays._B_DaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B-Days' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays._B_DaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.BirthDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDay' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.BirthDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableNext3MonthBirthdays.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'Next3MonthBirthdays' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNext3MonthBirthdays.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_DaysNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays._B_DaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_DaysNull()
            Me(Me.tableNext3MonthBirthdays._B_DaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDayNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.BirthDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDayNull()
            Me(Me.tableNext3MonthBirthdays.BirthDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableNext3MonthBirthdays.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableNext3MonthBirthdays.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableNext3MonthBirthdays.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableNext3MonthBirthdays.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableNext3MonthBirthdays.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableNext3MonthBirthdays.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableNext3MonthBirthdays.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableNext3MonthBirthdays.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableNext3MonthBirthdays.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableNext3MonthBirthdays.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableNext3MonthBirthdays.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PaidYearlyDuesLastMonthRow
        Inherits Global.System.Data.DataRow
        
        Private tablePaidYearlyDuesLastMonth As PaidYearlyDuesLastMonthDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePaidYearlyDuesLastMonth = CType(Me.Table,PaidYearlyDuesLastMonthDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paid_Dues() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.Paid_DuesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paid Dues' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.Paid_DuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewMemberDate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.NewMemberDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewMemberDate' in table 'PaidYearlyDuesLastMonth' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.NewMemberDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'PaidYearlyDuesLastMonth' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaidYearlyDuesLastMonth.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'PaidYearlyDuesLastMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaidYearlyDuesLastMonth.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaid_DuesNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.Paid_DuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaid_DuesNull()
            Me(Me.tablePaidYearlyDuesLastMonth.Paid_DuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewMemberDateNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.NewMemberDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewMemberDateNull()
            Me(Me.tablePaidYearlyDuesLastMonth.NewMemberDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablePaidYearlyDuesLastMonth.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tablePaidYearlyDuesLastMonth.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablePaidYearlyDuesLastMonth.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tablePaidYearlyDuesLastMonth.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tablePaidYearlyDuesLastMonth.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tablePaidYearlyDuesLastMonth.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tablePaidYearlyDuesLastMonth.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tablePaidYearlyDuesLastMonth.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tablePaidYearlyDuesLastMonth.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tablePaidYearlyDuesLastMonth.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tablePaidYearlyDuesLastMonth.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class YearlyDuesSoonRow
        Inherits Global.System.Data.DataRow
        
        Private tableYearlyDuesSoon As YearlyDuesSoonDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableYearlyDuesSoon = CType(Me.Table,YearlyDuesSoonDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dues_Coming() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.Dues_ComingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dues Coming' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.Dues_ComingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anniversary() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.AnniversaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anniversary' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.AnniversaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.ZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zip' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomePhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.HomePhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.HomePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.EmailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableYearlyDuesSoon.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'YearlyDuesSoon' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearlyDuesSoon.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDues_ComingNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.Dues_ComingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDues_ComingNull()
            Me(Me.tableYearlyDuesSoon.Dues_ComingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnniversaryNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.AnniversaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnniversaryNull()
            Me(Me.tableYearlyDuesSoon.AnniversaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableYearlyDuesSoon.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableYearlyDuesSoon.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableYearlyDuesSoon.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableYearlyDuesSoon.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableYearlyDuesSoon.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableYearlyDuesSoon.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.ZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipNull()
            Me(Me.tableYearlyDuesSoon.ZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.HomePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomePhoneNull()
            Me(Me.tableYearlyDuesSoon.HomePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableYearlyDuesSoon.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableYearlyDuesSoon.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableYearlyDuesSoon.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CheckInsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CheckInsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CheckInsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CheckInsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ContestantsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ContestantsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ContestantsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ContestantsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OKSwingMemberListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OKSwingMemberListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OKSwingMemberListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OKSwingMemberListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblFeesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblFeesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblFeesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblFeesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ActiveMembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ActiveMembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ActiveMembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ActiveMembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExpiringMembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExpiringMembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExpiringMembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExpiringMembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MissingMembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MissingMembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MissingMembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MissingMembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NewMembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NewMembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NewMembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NewMembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NextMonthBirthdaysRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NextMonthBirthdaysRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NextMonthBirthdaysRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NextMonthBirthdaysRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ThankYouMembersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ThankYouMembersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ThankYouMembersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ThankYouMembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MemberBirthdaysRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MemberBirthdaysRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MemberBirthdaysRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MemberBirthdaysRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NewPinkDancersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NewPinkDancersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NewPinkDancersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NewPinkDancersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Next3MonthBirthdaysRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Next3MonthBirthdaysRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Next3MonthBirthdaysRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Next3MonthBirthdaysRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PaidYearlyDuesLastMonthRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PaidYearlyDuesLastMonthRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PaidYearlyDuesLastMonthRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PaidYearlyDuesLastMonthRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class YearlyDuesSoonRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As YearlyDuesSoonRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As YearlyDuesSoonRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As YearlyDuesSoonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SCCheckInDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CheckInsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CheckIns"
            tableMapping.ColumnMappings.Add("CheckInID", "CheckInID")
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FullName", "FullName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("PaidType", "PaidType")
            tableMapping.ColumnMappings.Add("PaidAmount", "PaidAmount")
            tableMapping.ColumnMappings.Add("PaidDate", "PaidDate")
            tableMapping.ColumnMappings.Add("PaidDesc", "PaidDesc")
            tableMapping.ColumnMappings.Add("DanceType", "DanceType")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("ReferredBy", "ReferredBy")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CheckIns] WHERE (([CheckInID] = @Original_CheckInID) AND ((@Is"& _ 
                "Null_MemberID = 1 AND [MemberID] IS NULL) OR ([MemberID] = @Original_MemberID)) "& _ 
                "AND ((@IsNull_FullName = 1 AND [FullName] IS NULL) OR ([FullName] = @Original_Fu"& _ 
                "llName)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = "& _ 
                "@Original_FirstName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([La"& _ 
                "stName] = @Original_LastName)) AND ((@IsNull_PaidType = 1 AND [PaidType] IS NULL"& _ 
                ") OR ([PaidType] = @Original_PaidType)) AND ((@IsNull_PaidAmount = 1 AND [PaidAm"& _ 
                "ount] IS NULL) OR ([PaidAmount] = @Original_PaidAmount)) AND ((@IsNull_PaidDate "& _ 
                "= 1 AND [PaidDate] IS NULL) OR ([PaidDate] = @Original_PaidDate)) AND ((@IsNull_"& _ 
                "PaidDesc = 1 AND [PaidDesc] IS NULL) OR ([PaidDesc] = @Original_PaidDesc)) AND ("& _ 
                "[DanceType] = @Original_DanceType) AND ([CreateDate] = @Original_CreateDate) AND"& _ 
                " ((@IsNull_ReferredBy = 1 AND [ReferredBy] IS NULL) OR ([ReferredBy] = @Original"& _ 
                "_ReferredBy)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CheckInID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckInID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FullName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FullName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidDesc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DanceType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DanceType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CheckIns] ([MemberID], [FullName], [FirstName], [LastName], [P"& _ 
                "aidType], [PaidAmount], [PaidDate], [PaidDesc], [DanceType], [CreateDate], [Refe"& _ 
                "rredBy]) VALUES (@MemberID, @FullName, @FirstName, @LastName, @PaidType, @PaidAm"& _ 
                "ount, @PaidDate, @PaidDesc, @DanceType, @CreateDate, @ReferredBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Check"& _ 
                "InID, MemberID, FullName, FirstName, LastName, PaidType, PaidAmount, PaidDate, P"& _ 
                "aidDesc, DanceType, CreateDate, ReferredBy FROM CheckIns WHERE (CheckInID = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FullName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DanceType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DanceType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CheckIns] SET [MemberID] = @MemberID, [FullName] = @FullName, [Firs"& _ 
                "tName] = @FirstName, [LastName] = @LastName, [PaidType] = @PaidType, [PaidAmount"& _ 
                "] = @PaidAmount, [PaidDate] = @PaidDate, [PaidDesc] = @PaidDesc, [DanceType] = @"& _ 
                "DanceType, [CreateDate] = @CreateDate, [ReferredBy] = @ReferredBy WHERE (([Check"& _ 
                "InID] = @Original_CheckInID) AND ((@IsNull_MemberID = 1 AND [MemberID] IS NULL) "& _ 
                "OR ([MemberID] = @Original_MemberID)) AND ((@IsNull_FullName = 1 AND [FullName] "& _ 
                "IS NULL) OR ([FullName] = @Original_FullName)) AND ((@IsNull_FirstName = 1 AND ["& _ 
                "FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_LastNa"& _ 
                "me = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNu"& _ 
                "ll_PaidType = 1 AND [PaidType] IS NULL) OR ([PaidType] = @Original_PaidType)) AN"& _ 
                "D ((@IsNull_PaidAmount = 1 AND [PaidAmount] IS NULL) OR ([PaidAmount] = @Origina"& _ 
                "l_PaidAmount)) AND ((@IsNull_PaidDate = 1 AND [PaidDate] IS NULL) OR ([PaidDate]"& _ 
                " = @Original_PaidDate)) AND ((@IsNull_PaidDesc = 1 AND [PaidDesc] IS NULL) OR (["& _ 
                "PaidDesc] = @Original_PaidDesc)) AND ([DanceType] = @Original_DanceType) AND ([C"& _ 
                "reateDate] = @Original_CreateDate) AND ((@IsNull_ReferredBy = 1 AND [ReferredBy]"& _ 
                " IS NULL) OR ([ReferredBy] = @Original_ReferredBy)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CheckInID, MemberI"& _ 
                "D, FullName, FirstName, LastName, PaidType, PaidAmount, PaidDate, PaidDesc, Danc"& _ 
                "eType, CreateDate, ReferredBy FROM CheckIns WHERE (CheckInID = @CheckInID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FullName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DanceType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DanceType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CheckInID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckInID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FullName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FullName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FullName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PaidDesc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PaidDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DanceType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DanceType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreateDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferredBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferredBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckInID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckInID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CheckInID, MemberID, FullName, FirstName, LastName, PaidType, PaidAmount, "& _ 
                "PaidDate, PaidDesc, DanceType, CreateDate, ReferredBy FROM dbo.CheckIns"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.CheckInsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.CheckInsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.CheckInsDataTable = New SCCheckInDataSet.CheckInsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SCCheckInDataSet.CheckInsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SCCheckInDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CheckIns")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CheckInID As Integer, ByVal Original_MemberID As Global.System.Nullable(Of Integer), ByVal Original_FullName As String, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_PaidType As Global.System.Nullable(Of Integer), ByVal Original_PaidAmount As Global.System.Nullable(Of Decimal), ByVal Original_PaidDate As Global.System.Nullable(Of Date), ByVal Original_PaidDesc As String, ByVal Original_DanceType As Integer, ByVal Original_CreateDate As Date, ByVal Original_ReferredBy As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CheckInID,Integer)
            If (Original_MemberID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MemberID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_FullName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FullName,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FirstName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LastName,String)
            End If
            If (Original_PaidType.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PaidType.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PaidAmount.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PaidDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidDesc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PaidDesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_DanceType,Integer)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CreateDate,Date)
            If (Original_ReferredBy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ReferredBy.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MemberID As Global.System.Nullable(Of Integer), ByVal FullName As String, ByVal FirstName As String, ByVal LastName As String, ByVal PaidType As Global.System.Nullable(Of Integer), ByVal PaidAmount As Global.System.Nullable(Of Decimal), ByVal PaidDate As Global.System.Nullable(Of Date), ByVal PaidDesc As String, ByVal DanceType As Integer, ByVal CreateDate As Date, ByVal ReferredBy As Global.System.Nullable(Of Integer)) As Integer
            If (MemberID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MemberID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (FullName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FullName,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FirstName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (PaidType.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PaidType.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PaidAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PaidAmount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PaidDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PaidDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PaidDesc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PaidDesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(DanceType,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(CreateDate,Date)
            If (ReferredBy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ReferredBy.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MemberID As Global.System.Nullable(Of Integer),  _
                    ByVal FullName As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal PaidType As Global.System.Nullable(Of Integer),  _
                    ByVal PaidAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal PaidDate As Global.System.Nullable(Of Date),  _
                    ByVal PaidDesc As String,  _
                    ByVal DanceType As Integer,  _
                    ByVal CreateDate As Date,  _
                    ByVal ReferredBy As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CheckInID As Integer,  _
                    ByVal Original_MemberID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FullName As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_PaidType As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PaidAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PaidDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_PaidDesc As String,  _
                    ByVal Original_DanceType As Integer,  _
                    ByVal Original_CreateDate As Date,  _
                    ByVal Original_ReferredBy As Global.System.Nullable(Of Integer),  _
                    ByVal CheckInID As Integer) As Integer
            If (MemberID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MemberID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (FullName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FullName,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FirstName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (PaidType.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PaidType.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PaidAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PaidAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PaidDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PaidDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PaidDesc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PaidDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DanceType,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CreateDate,Date)
            If (ReferredBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ReferredBy.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CheckInID,Integer)
            If (Original_MemberID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MemberID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_FullName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FullName,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FirstName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_LastName,String)
            End If
            If (Original_PaidType.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PaidType.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_PaidAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_PaidDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_PaidDesc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_PaidDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_DanceType,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_CreateDate,Date)
            If (Original_ReferredBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ReferredBy.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(CheckInID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MemberID As Global.System.Nullable(Of Integer),  _
                    ByVal FullName As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal PaidType As Global.System.Nullable(Of Integer),  _
                    ByVal PaidAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal PaidDate As Global.System.Nullable(Of Date),  _
                    ByVal PaidDesc As String,  _
                    ByVal DanceType As Integer,  _
                    ByVal CreateDate As Date,  _
                    ByVal ReferredBy As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CheckInID As Integer,  _
                    ByVal Original_MemberID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FullName As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_PaidType As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PaidAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PaidDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_PaidDesc As String,  _
                    ByVal Original_DanceType As Integer,  _
                    ByVal Original_CreateDate As Date,  _
                    ByVal Original_ReferredBy As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(MemberID, FullName, FirstName, LastName, PaidType, PaidAmount, PaidDate, PaidDesc, DanceType, CreateDate, ReferredBy, Original_CheckInID, Original_MemberID, Original_FullName, Original_FirstName, Original_LastName, Original_PaidType, Original_PaidAmount, Original_PaidDate, Original_PaidDesc, Original_DanceType, Original_CreateDate, Original_ReferredBy, Original_CheckInID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ContestantsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contestants"
            tableMapping.ColumnMappings.Add("ContestantID", "ContestantID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber")
            tableMapping.ColumnMappings.Add("EmailName", "EmailName")
            tableMapping.ColumnMappings.Add("ContestantNumber", "ContestantNumber")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("ClubID", "ClubID")
            tableMapping.ColumnMappings.Add("PaidID", "PaidID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contestants] ([ContestantID], [FirstName], [LastName], [Addres"& _ 
                "s], [City], [State], [PostalCode], [PhoneNumber], [EmailName], [ContestantNumber"& _ 
                "], [Notes], [ClubID], [PaidID]) VALUES (@ContestantID, @FirstName, @LastName, @A"& _ 
                "ddress, @City, @State, @PostalCode, @PhoneNumber, @EmailName, @ContestantNumber,"& _ 
                " @Notes, @ClubID, @PaidID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContestantID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContestantID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@City", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PostalCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PostalCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PhoneNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContestantNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContestantNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClubID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClubID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaidID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaidID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ContestantID, FirstName, LastName, Address, City, State, PostalCode, Phone"& _ 
                "Number, EmailName, ContestantNumber, Notes, ClubID, PaidID FROM dbo.Contestants"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.ContestantsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.ContestantsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.ContestantsDataTable = New SCCheckInDataSet.ContestantsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SCCheckInDataSet.ContestantsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SCCheckInDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Contestants")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ContestantID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal PostalCode As String, ByVal PhoneNumber As String, ByVal EmailName As String, ByVal ContestantNumber As String, ByVal Notes As String, ByVal ClubID As Global.System.Nullable(Of Integer), ByVal PaidID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ContestantID,Integer)
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LastName,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address,String)
            End If
            If (City Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(City,String)
            End If
            If (State Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(State,String)
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PostalCode,String)
            End If
            If (PhoneNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PhoneNumber,String)
            End If
            If (EmailName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(EmailName,String)
            End If
            If (ContestantNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ContestantNumber,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Notes,String)
            End If
            If (ClubID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ClubID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PaidID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PaidID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OKSwingMemberListTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OKSwingMemberList"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OKSwingMemberList] WHERE (([MemberID] = @Original_MemberID) AN"& _ 
                "D ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_F"& _ 
                "irstName)) AND ((@IsNull_MiddleName = 1 AND [MiddleName] IS NULL) OR ([MiddleNam"& _ 
                "e] = @Original_MiddleName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) O"& _ 
                "R ([LastName] = @Original_LastName)) AND ((@IsNull_Address = 1 AND [Address] IS "& _ 
                "NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS N"& _ 
                "ULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) "& _ 
                "OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zi"& _ 
                "p] = @Original_Zip)) AND ((@IsNull_HomePhone = 1 AND [HomePhone] IS NULL) OR ([H"& _ 
                "omePhone] = @Original_HomePhone)) AND ((@IsNull_WorkPhone = 1 AND [WorkPhone] IS"& _ 
                " NULL) OR ([WorkPhone] = @Original_WorkPhone)) AND ((@IsNull_FaxNumber = 1 AND ["& _ 
                "FaxNumber] IS NULL) OR ([FaxNumber] = @Original_FaxNumber)) AND ((@IsNull_EmailA"& _ 
                "ddress = 1 AND [EmailAddress] IS NULL) OR ([EmailAddress] = @Original_EmailAddre"& _ 
                "ss)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Sta"& _ 
                "tus)) AND ((@IsNull_DateJoined = 1 AND [DateJoined] IS NULL) OR ([DateJoined] = "& _ 
                "@Original_DateJoined)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @"& _ 
                "Original_Type)) AND ((@IsNull_LastPaid = 1 AND [LastPaid] IS NULL) OR ([LastPaid"& _ 
                "] = @Original_LastPaid)) AND ((@IsNull_Dues = 1 AND [Dues] IS NULL) OR ([Dues] ="& _ 
                " @Original_Dues)) AND ((@IsNull_InputDate = 1 AND [InputDate] IS NULL) OR ([Inpu"& _ 
                "tDate] = @Original_InputDate)) AND ((@IsNull_MemberStatus = 1 AND [MemberStatus]"& _ 
                " IS NULL) OR ([MemberStatus] = @Original_MemberStatus)) AND ((@IsNull_Organizati"& _ 
                "on = 1 AND [Organization] IS NULL) OR ([Organization] = @Original_Organization))"& _ 
                " AND ((@IsNull_DOB = 1 AND [DOB] IS NULL) OR ([DOB] = @Original_DOB)) AND ((@IsN"& _ 
                "ull_Anniversary = 1 AND [Anniversary] IS NULL) OR ([Anniversary] = @Original_Ann"& _ 
                "iversary)) AND ((@IsNull_DataEaseMemberNumber = 1 AND [DataEaseMemberNumber] IS "& _ 
                "NULL) OR ([DataEaseMemberNumber] = @Original_DataEaseMemberNumber)) AND ((@IsNul"& _ 
                "l_BirthMonth = 1 AND [BirthMonth] IS NULL) OR ([BirthMonth] = @Original_BirthMon"& _ 
                "th)) AND ((@IsNull_BirthDay = 1 AND [BirthDay] IS NULL) OR ([BirthDay] = @Origin"& _ 
                "al_BirthDay)) AND ([Charter] = @Original_Charter) AND ([NewMemberDate] = @Origin"& _ 
                "al_NewMemberDate) AND ((@IsNull_DateLastUpdated = 1 AND [DateLastUpdated] IS NUL"& _ 
                "L) OR ([DateLastUpdated] = @Original_DateLastUpdated)) AND ((@IsNull_LastUpdated"& _ 
                "By = 1 AND [LastUpdatedBy] IS NULL) OR ([LastUpdatedBy] = @Original_LastUpdatedB"& _ 
                "y)) AND ([Dateadded] = @Original_Dateadded) AND ((@IsNull_AddedBy = 1 AND [Added"& _ 
                "By] IS NULL) OR ([AddedBy] = @Original_AddedBy)) AND ((@IsNull_Comments = 1 AND "& _ 
                "[Comments] IS NULL) OR ([Comments] = @Original_Comments)) AND ((@IsNull_CellPhon"& _ 
                "e = 1 AND [CellPhone] IS NULL) OR ([CellPhone] = @Original_CellPhone)) AND ([Inv"& _ 
                "alidAddress] = @Original_InvalidAddress) AND ([IsDeleted] = @Original_IsDeleted)"& _ 
                " AND ([ClassID] = @Original_ClassID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MiddleName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MiddleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Address", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_City", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_State", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_State", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Zip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Zip", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HomePhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HomePhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FaxNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FaxNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EmailAddress", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateJoined", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateJoined", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastPaid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastPaid", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dues", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dues", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MemberStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Organization", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Organization", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DOB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DOB", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anniversary", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anniversary", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DataEaseMemberNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DataEaseMemberNumber", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BirthMonth", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BirthMonth", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BirthDay", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BirthDay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Charter", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Charter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NewMemberDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewMemberDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateLastUpdated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateLastUpdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastUpdatedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastUpdatedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dateadded", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dateadded", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AddedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AddedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Comments", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CellPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CellPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvalidAddress", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvalidAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsDeleted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClassID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClassID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OKSwingMemberList] ([FirstName], [MiddleName], [LastName], [Ad"& _ 
                "dress], [City], [State], [Zip], [HomePhone], [WorkPhone], [FaxNumber], [EmailAdd"& _ 
                "ress], [Status], [DateJoined], [Type], [LastPaid], [Dues], [InputDate], [MemberS"& _ 
                "tatus], [Organization], [DOB], [Anniversary], [DataEaseMemberNumber], [BirthMont"& _ 
                "h], [BirthDay], [Charter], [NewMemberDate], [DateLastUpdated], [LastUpdatedBy], "& _ 
                "[Dateadded], [AddedBy], [Comments], [CellPhone], [InvalidAddress], [IsDeleted], "& _ 
                "[ClassID]) VALUES (@FirstName, @MiddleName, @LastName, @Address, @City, @State, "& _ 
                "@Zip, @HomePhone, @WorkPhone, @FaxNumber, @EmailAddress, @Status, @DateJoined, @"& _ 
                "Type, @LastPaid, @Dues, @InputDate, @MemberStatus, @Organization, @DOB, @Anniver"& _ 
                "sary, @DataEaseMemberNumber, @BirthMonth, @BirthDay, @Charter, @NewMemberDate, @"& _ 
                "DateLastUpdated, @LastUpdatedBy, @Dateadded, @AddedBy, @Comments, @CellPhone, @I"& _ 
                "nvalidAddress, @IsDeleted, @ClassID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MemberID, FirstName, MiddleName, L"& _ 
                "astName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddres"& _ 
                "s, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organizati"& _ 
                "on, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMe"& _ 
                "mberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhon"& _ 
                "e, InvalidAddress, IsDeleted, ClassID FROM OKSwingMemberList WHERE (MemberID = S"& _ 
                "COPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MiddleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zip", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HomePhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FaxNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateJoined", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastPaid", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dues", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Organization", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOB", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anniversary", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataEaseMemberNumber", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BirthMonth", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BirthDay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Charter", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Charter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewMemberDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewMemberDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateLastUpdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdatedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dateadded", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dateadded", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AddedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CellPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvalidAddress", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvalidAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsDeleted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClassID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClassID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OKSwingMemberList] SET [FirstName] = @FirstName, [MiddleName] = @Mi"& _ 
                "ddleName, [LastName] = @LastName, [Address] = @Address, [City] = @City, [State] "& _ 
                "= @State, [Zip] = @Zip, [HomePhone] = @HomePhone, [WorkPhone] = @WorkPhone, [Fax"& _ 
                "Number] = @FaxNumber, [EmailAddress] = @EmailAddress, [Status] = @Status, [DateJ"& _ 
                "oined] = @DateJoined, [Type] = @Type, [LastPaid] = @LastPaid, [Dues] = @Dues, [I"& _ 
                "nputDate] = @InputDate, [MemberStatus] = @MemberStatus, [Organization] = @Organi"& _ 
                "zation, [DOB] = @DOB, [Anniversary] = @Anniversary, [DataEaseMemberNumber] = @Da"& _ 
                "taEaseMemberNumber, [BirthMonth] = @BirthMonth, [BirthDay] = @BirthDay, [Charter"& _ 
                "] = @Charter, [NewMemberDate] = @NewMemberDate, [DateLastUpdated] = @DateLastUpd"& _ 
                "ated, [LastUpdatedBy] = @LastUpdatedBy, [Dateadded] = @Dateadded, [AddedBy] = @A"& _ 
                "ddedBy, [Comments] = @Comments, [CellPhone] = @CellPhone, [InvalidAddress] = @In"& _ 
                "validAddress, [IsDeleted] = @IsDeleted, [ClassID] = @ClassID WHERE (([MemberID] "& _ 
                "= @Original_MemberID) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR (["& _ 
                "FirstName] = @Original_FirstName)) AND ((@IsNull_MiddleName = 1 AND [MiddleName]"& _ 
                " IS NULL) OR ([MiddleName] = @Original_MiddleName)) AND ((@IsNull_LastName = 1 A"& _ 
                "ND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_Addre"& _ 
                "ss = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_"& _ 
                "City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State ="& _ 
                " 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AN"& _ 
                "D [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_HomePhone = 1 AND [Ho"& _ 
                "mePhone] IS NULL) OR ([HomePhone] = @Original_HomePhone)) AND ((@IsNull_WorkPhon"& _ 
                "e = 1 AND [WorkPhone] IS NULL) OR ([WorkPhone] = @Original_WorkPhone)) AND ((@Is"& _ 
                "Null_FaxNumber = 1 AND [FaxNumber] IS NULL) OR ([FaxNumber] = @Original_FaxNumbe"& _ 
                "r)) AND ((@IsNull_EmailAddress = 1 AND [EmailAddress] IS NULL) OR ([EmailAddress"& _ 
                "] = @Original_EmailAddress)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ("& _ 
                "[Status] = @Original_Status)) AND ((@IsNull_DateJoined = 1 AND [DateJoined] IS N"& _ 
                "ULL) OR ([DateJoined] = @Original_DateJoined)) AND ((@IsNull_Type = 1 AND [Type]"& _ 
                " IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_LastPaid = 1 AND [LastPaid"& _ 
                "] IS NULL) OR ([LastPaid] = @Original_LastPaid)) AND ((@IsNull_Dues = 1 AND [Due"& _ 
                "s] IS NULL) OR ([Dues] = @Original_Dues)) AND ((@IsNull_InputDate = 1 AND [Input"& _ 
                "Date] IS NULL) OR ([InputDate] = @Original_InputDate)) AND ((@IsNull_MemberStatu"& _ 
                "s = 1 AND [MemberStatus] IS NULL) OR ([MemberStatus] = @Original_MemberStatus)) "& _ 
                "AND ((@IsNull_Organization = 1 AND [Organization] IS NULL) OR ([Organization] = "& _ 
                "@Original_Organization)) AND ((@IsNull_DOB = 1 AND [DOB] IS NULL) OR ([DOB] = @O"& _ 
                "riginal_DOB)) AND ((@IsNull_Anniversary = 1 AND [Anniversary] IS NULL) OR ([Anni"& _ 
                "versary] = @Original_Anniversary)) AND ((@IsNull_DataEaseMemberNumber = 1 AND [D"& _ 
                "ataEaseMemberNumber] IS NULL) OR ([DataEaseMemberNumber] = @Original_DataEaseMem"& _ 
                "berNumber)) AND ((@IsNull_BirthMonth = 1 AND [BirthMonth] IS NULL) OR ([BirthMon"& _ 
                "th] = @Original_BirthMonth)) AND ((@IsNull_BirthDay = 1 AND [BirthDay] IS NULL) "& _ 
                "OR ([BirthDay] = @Original_BirthDay)) AND ([Charter] = @Original_Charter) AND (["& _ 
                "NewMemberDate] = @Original_NewMemberDate) AND ((@IsNull_DateLastUpdated = 1 AND "& _ 
                "[DateLastUpdated] IS NULL) OR ([DateLastUpdated] = @Original_DateLastUpdated)) A"& _ 
                "ND ((@IsNull_LastUpdatedBy = 1 AND [LastUpdatedBy] IS NULL) OR ([LastUpdatedBy] "& _ 
                "= @Original_LastUpdatedBy)) AND ([Dateadded] = @Original_Dateadded) AND ((@IsNul"& _ 
                "l_AddedBy = 1 AND [AddedBy] IS NULL) OR ([AddedBy] = @Original_AddedBy)) AND ((@"& _ 
                "IsNull_Comments = 1 AND [Comments] IS NULL) OR ([Comments] = @Original_Comments)"& _ 
                ") AND ((@IsNull_CellPhone = 1 AND [CellPhone] IS NULL) OR ([CellPhone] = @Origin"& _ 
                "al_CellPhone)) AND ([InvalidAddress] = @Original_InvalidAddress) AND ([IsDeleted"& _ 
                "] = @Original_IsDeleted) AND ([ClassID] = @Original_ClassID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MemberID,"& _ 
                " FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhon"& _ 
                "e, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate,"& _ 
                " MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth,"& _ 
                " BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, Ad"& _ 
                "dedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID FROM OKSwingMembe"& _ 
                "rList WHERE (MemberID = @MemberID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MiddleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zip", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HomePhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FaxNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateJoined", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastPaid", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dues", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Organization", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOB", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anniversary", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataEaseMemberNumber", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BirthMonth", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BirthDay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Charter", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Charter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewMemberDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewMemberDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateLastUpdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastUpdatedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dateadded", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dateadded", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AddedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CellPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvalidAddress", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvalidAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsDeleted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClassID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClassID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MiddleName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MiddleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MiddleName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Address", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_City", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_State", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_State", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Zip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Zip", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HomePhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HomePhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HomePhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FaxNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FaxNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EmailAddress", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateJoined", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateJoined", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateJoined", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastPaid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastPaid", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastPaid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dues", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dues", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dues", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MemberStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MemberStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Organization", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Organization", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organization", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DOB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DOB", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anniversary", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anniversary", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anniversary", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DataEaseMemberNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DataEaseMemberNumber", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataEaseMemberNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BirthMonth", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BirthMonth", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthMonth", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BirthDay", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BirthDay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BirthDay", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Charter", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Charter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NewMemberDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewMemberDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateLastUpdated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateLastUpdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateLastUpdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastUpdatedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastUpdatedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastUpdatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dateadded", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dateadded", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AddedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AddedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AddedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Comments", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CellPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CellPhone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CellPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvalidAddress", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvalidAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsDeleted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClassID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClassID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID FR"& _ 
                "OM dbo.OKSwingMemberList"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.OKSwingMemberListDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.OKSwingMemberListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.OKSwingMemberListDataTable = New SCCheckInDataSet.OKSwingMemberListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SCCheckInDataSet.OKSwingMemberListDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SCCheckInDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OKSwingMemberList")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MemberID As Integer,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_State As String,  _
                    ByVal Original_Zip As String,  _
                    ByVal Original_HomePhone As String,  _
                    ByVal Original_WorkPhone As String,  _
                    ByVal Original_FaxNumber As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Status As String,  _
                    ByVal Original_DateJoined As String,  _
                    ByVal Original_Type As String,  _
                    ByVal Original_LastPaid As String,  _
                    ByVal Original_Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_InputDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_MemberStatus As String,  _
                    ByVal Original_Organization As String,  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal Original_DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal Original_BirthMonth As String,  _
                    ByVal Original_BirthDay As String,  _
                    ByVal Original_Charter As Boolean,  _
                    ByVal Original_NewMemberDate As Date,  _
                    ByVal Original_DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal Original_LastUpdatedBy As String,  _
                    ByVal Original_Dateadded As String,  _
                    ByVal Original_AddedBy As String,  _
                    ByVal Original_Comments As String,  _
                    ByVal Original_CellPhone As String,  _
                    ByVal Original_InvalidAddress As Boolean,  _
                    ByVal Original_IsDeleted As Boolean,  _
                    ByVal Original_ClassID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MemberID,Integer)
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LastName,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Address,String)
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_City,String)
            End If
            If (Original_State Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_State,String)
            End If
            If (Original_Zip Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Zip,String)
            End If
            If (Original_HomePhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_HomePhone,String)
            End If
            If (Original_WorkPhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_WorkPhone,String)
            End If
            If (Original_FaxNumber Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_FaxNumber,String)
            End If
            If (Original_EmailAddress Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_EmailAddress,String)
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Status,String)
            End If
            If (Original_DateJoined Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DateJoined,String)
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Type,String)
            End If
            If (Original_LastPaid Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_LastPaid,String)
            End If
            If (Original_Dues.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Dues.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_InputDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_InputDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_MemberStatus Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MemberStatus,String)
            End If
            If (Original_Organization Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Organization,String)
            End If
            If (Original_DOB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_DOB.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Anniversary.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Anniversary.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_DataEaseMemberNumber.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_DataEaseMemberNumber.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_BirthMonth Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_BirthMonth,String)
            End If
            If (Original_BirthDay Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_BirthDay,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_Charter,Boolean)
            Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_NewMemberDate,Date)
            If (Original_DateLastUpdated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_DateLastUpdated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_LastUpdatedBy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_LastUpdatedBy,String)
            End If
            If (Original_Dateadded Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dateadded")
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_Dateadded,String)
            End If
            If (Original_AddedBy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_AddedBy,String)
            End If
            If (Original_Comments Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_Comments,String)
            End If
            If (Original_CellPhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_CellPhone,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_InvalidAddress,Boolean)
            Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_IsDeleted,Boolean)
            Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_ClassID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal InputDate As Global.System.Nullable(Of Date),  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer) As Integer
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LastName,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address,String)
            End If
            If (City Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(City,String)
            End If
            If (State Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(State,String)
            End If
            If (Zip Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Zip,String)
            End If
            If (HomePhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(HomePhone,String)
            End If
            If (WorkPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(WorkPhone,String)
            End If
            If (FaxNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FaxNumber,String)
            End If
            If (EmailAddress Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(EmailAddress,String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Status,String)
            End If
            If (DateJoined Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DateJoined,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Type,String)
            End If
            If (LastPaid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(LastPaid,String)
            End If
            If (Dues.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Dues.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (InputDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(InputDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MemberStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MemberStatus,String)
            End If
            If (Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Organization,String)
            End If
            If (DOB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DOB.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Anniversary.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Anniversary.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (DataEaseMemberNumber.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(DataEaseMemberNumber.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (BirthMonth Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(BirthMonth,String)
            End If
            If (BirthDay Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(BirthDay,String)
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(Charter,Boolean)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(NewMemberDate,Date)
            If (DateLastUpdated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DateLastUpdated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (LastUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(LastUpdatedBy,String)
            End If
            If (Dateadded Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dateadded")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Dateadded,String)
            End If
            If (AddedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(AddedBy,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Comments,String)
            End If
            If (CellPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(CellPhone,String)
            End If
            Me.Adapter.InsertCommand.Parameters(32).Value = CType(InvalidAddress,Boolean)
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(IsDeleted,Boolean)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(ClassID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal InputDate As Global.System.Nullable(Of Date),  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer,  _
                    ByVal Original_MemberID As Integer,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_State As String,  _
                    ByVal Original_Zip As String,  _
                    ByVal Original_HomePhone As String,  _
                    ByVal Original_WorkPhone As String,  _
                    ByVal Original_FaxNumber As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Status As String,  _
                    ByVal Original_DateJoined As String,  _
                    ByVal Original_Type As String,  _
                    ByVal Original_LastPaid As String,  _
                    ByVal Original_Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_InputDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_MemberStatus As String,  _
                    ByVal Original_Organization As String,  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal Original_DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal Original_BirthMonth As String,  _
                    ByVal Original_BirthDay As String,  _
                    ByVal Original_Charter As Boolean,  _
                    ByVal Original_NewMemberDate As Date,  _
                    ByVal Original_DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal Original_LastUpdatedBy As String,  _
                    ByVal Original_Dateadded As String,  _
                    ByVal Original_AddedBy As String,  _
                    ByVal Original_Comments As String,  _
                    ByVal Original_CellPhone As String,  _
                    ByVal Original_InvalidAddress As Boolean,  _
                    ByVal Original_IsDeleted As Boolean,  _
                    ByVal Original_ClassID As Integer,  _
                    ByVal MemberID As Integer) As Integer
            If (FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LastName,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address,String)
            End If
            If (City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(City,String)
            End If
            If (State Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(State,String)
            End If
            If (Zip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Zip,String)
            End If
            If (HomePhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(HomePhone,String)
            End If
            If (WorkPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(WorkPhone,String)
            End If
            If (FaxNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FaxNumber,String)
            End If
            If (EmailAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(EmailAddress,String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Status,String)
            End If
            If (DateJoined Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DateJoined,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Type,String)
            End If
            If (LastPaid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(LastPaid,String)
            End If
            If (Dues.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Dues.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (InputDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(InputDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MemberStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MemberStatus,String)
            End If
            If (Organization Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Organization,String)
            End If
            If (DOB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DOB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Anniversary.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Anniversary.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (DataEaseMemberNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(DataEaseMemberNumber.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (BirthMonth Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(BirthMonth,String)
            End If
            If (BirthDay Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(BirthDay,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Charter,Boolean)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(NewMemberDate,Date)
            If (DateLastUpdated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(DateLastUpdated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (LastUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(LastUpdatedBy,String)
            End If
            If (Dateadded Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dateadded")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Dateadded,String)
            End If
            If (AddedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(AddedBy,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Comments,String)
            End If
            If (CellPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(CellPhone,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(InvalidAddress,Boolean)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(IsDeleted,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ClassID,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_MemberID,Integer)
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LastName,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Address,String)
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_City,String)
            End If
            If (Original_State Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_State,String)
            End If
            If (Original_Zip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Zip,String)
            End If
            If (Original_HomePhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_HomePhone,String)
            End If
            If (Original_WorkPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_WorkPhone,String)
            End If
            If (Original_FaxNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_FaxNumber,String)
            End If
            If (Original_EmailAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_EmailAddress,String)
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_Status,String)
            End If
            If (Original_DateJoined Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_DateJoined,String)
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_Type,String)
            End If
            If (Original_LastPaid Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_LastPaid,String)
            End If
            If (Original_Dues.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_Dues.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_InputDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_InputDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_MemberStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_MemberStatus,String)
            End If
            If (Original_Organization Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_Organization,String)
            End If
            If (Original_DOB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_DOB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_Anniversary.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_Anniversary.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_DataEaseMemberNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_DataEaseMemberNumber.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_BirthMonth Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_BirthMonth,String)
            End If
            If (Original_BirthDay Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_BirthDay,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_Charter,Boolean)
            Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_NewMemberDate,Date)
            If (Original_DateLastUpdated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_DateLastUpdated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_LastUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_LastUpdatedBy,String)
            End If
            If (Original_Dateadded Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dateadded")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_Dateadded,String)
            End If
            If (Original_AddedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_AddedBy,String)
            End If
            If (Original_Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_Comments,String)
            End If
            If (Original_CellPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_CellPhone,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_InvalidAddress,Boolean)
            Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_IsDeleted,Boolean)
            Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_ClassID,Integer)
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(MemberID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal HomePhone As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal FaxNumber As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Status As String,  _
                    ByVal DateJoined As String,  _
                    ByVal Type As String,  _
                    ByVal LastPaid As String,  _
                    ByVal Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal InputDate As Global.System.Nullable(Of Date),  _
                    ByVal MemberStatus As String,  _
                    ByVal Organization As String,  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal BirthMonth As String,  _
                    ByVal BirthDay As String,  _
                    ByVal Charter As Boolean,  _
                    ByVal NewMemberDate As Date,  _
                    ByVal DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal LastUpdatedBy As String,  _
                    ByVal Dateadded As String,  _
                    ByVal AddedBy As String,  _
                    ByVal Comments As String,  _
                    ByVal CellPhone As String,  _
                    ByVal InvalidAddress As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal ClassID As Integer,  _
                    ByVal Original_MemberID As Integer,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_State As String,  _
                    ByVal Original_Zip As String,  _
                    ByVal Original_HomePhone As String,  _
                    ByVal Original_WorkPhone As String,  _
                    ByVal Original_FaxNumber As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Status As String,  _
                    ByVal Original_DateJoined As String,  _
                    ByVal Original_Type As String,  _
                    ByVal Original_LastPaid As String,  _
                    ByVal Original_Dues As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_InputDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_MemberStatus As String,  _
                    ByVal Original_Organization As String,  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_Anniversary As Global.System.Nullable(Of Date),  _
                    ByVal Original_DataEaseMemberNumber As Global.System.Nullable(Of Double),  _
                    ByVal Original_BirthMonth As String,  _
                    ByVal Original_BirthDay As String,  _
                    ByVal Original_Charter As Boolean,  _
                    ByVal Original_NewMemberDate As Date,  _
                    ByVal Original_DateLastUpdated As Global.System.Nullable(Of Date),  _
                    ByVal Original_LastUpdatedBy As String,  _
                    ByVal Original_Dateadded As String,  _
                    ByVal Original_AddedBy As String,  _
                    ByVal Original_Comments As String,  _
                    ByVal Original_CellPhone As String,  _
                    ByVal Original_InvalidAddress As Boolean,  _
                    ByVal Original_IsDeleted As Boolean,  _
                    ByVal Original_ClassID As Integer) As Integer
            Return Me.Update(FirstName, MiddleName, LastName, Address, City, State, Zip, HomePhone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, Dues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumber, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy, Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID, Original_MemberID, Original_FirstName, Original_MiddleName, Original_LastName, Original_Address, Original_City, Original_State, Original_Zip, Original_HomePhone, Original_WorkPhone, Original_FaxNumber, Original_EmailAddress, Original_Status, Original_DateJoined, Original_Type, Original_LastPaid, Original_Dues, Original_InputDate, Original_MemberStatus, Original_Organization, Original_DOB, Original_Anniversary, Original_DataEaseMemberNumber, Original_BirthMonth, Original_BirthDay, Original_Charter, Original_NewMemberDate, Original_DateLastUpdated, Original_LastUpdatedBy, Original_Dateadded, Original_AddedBy, Original_Comments, Original_CellPhone, Original_InvalidAddress, Original_IsDeleted, Original_ClassID, Original_MemberID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblFeesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblFees"
            tableMapping.ColumnMappings.Add("FeeID", "FeeID")
            tableMapping.ColumnMappings.Add("FeeCode", "FeeCode")
            tableMapping.ColumnMappings.Add("FeeAmount", "FeeAmount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblFees] ([FeeID], [FeeCode], [FeeAmount]) VALUES (@FeeID, @Fe"& _ 
                "eCode, @FeeAmount)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeeCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeeCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FeeAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FeeAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FeeID, FeeCode, FeeAmount FROM dbo.tblFees"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.tblFeesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.tblFeesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.tblFeesDataTable = New SCCheckInDataSet.tblFeesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SCCheckInDataSet.tblFeesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SCCheckInDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblFees")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FeeID As Integer, ByVal FeeCode As String, ByVal FeeAmount As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FeeID,Integer)
            If (FeeCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FeeCode,String)
            End If
            If (FeeAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FeeAmount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ActiveMembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ActiveMembers"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID FR"& _ 
                "OM dbo.ActiveMembers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.ActiveMembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.ActiveMembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.ActiveMembersDataTable = New SCCheckInDataSet.ActiveMembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ExpiringMembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ExpiringMembers"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress FROM dbo.ExpiringMembe"& _ 
                "rs"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.ExpiringMembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.ExpiringMembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.ExpiringMembersDataTable = New SCCheckInDataSet.ExpiringMembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Members"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress FROM dbo.Members"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.MembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.MembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.MembersDataTable = New SCCheckInDataSet.MembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MissingMembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MissingMembers"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone FROM dbo.MissingMembers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.MissingMembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.MissingMembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.MissingMembersDataTable = New SCCheckInDataSet.MissingMembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NewMembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NewMembers"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress FROM dbo.NewMembers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.NewMembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.NewMembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.NewMembersDataTable = New SCCheckInDataSet.NewMembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NextMonthBirthdaysTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NextMonthBirthdays"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress, IsDeleted, ClassID FR"& _ 
                "OM dbo.NextMonthBirthdays"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.NextMonthBirthdaysDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.NextMonthBirthdaysDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.NextMonthBirthdaysDataTable = New SCCheckInDataSet.NextMonthBirthdaysDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ThankYouMembersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ThankYouMembers"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MemberID, FirstName, MiddleName, LastName, Address, City, State, Zip, Home"& _ 
                "Phone, WorkPhone, FaxNumber, EmailAddress, Status, DateJoined, Type, LastPaid, D"& _ 
                "ues, InputDate, MemberStatus, Organization, DOB, Anniversary, DataEaseMemberNumb"& _ 
                "er, BirthMonth, BirthDay, Charter, NewMemberDate, DateLastUpdated, LastUpdatedBy"& _ 
                ", Dateadded, AddedBy, Comments, CellPhone, InvalidAddress FROM dbo.ThankYouMembe"& _ 
                "rs"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.ThankYouMembersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.ThankYouMembersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.ThankYouMembersDataTable = New SCCheckInDataSet.ThankYouMembersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MemberBirthdaysTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MemberBirthdays"
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("WorkPhone", "WorkPhone")
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DateJoined", "DateJoined")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("LastPaid", "LastPaid")
            tableMapping.ColumnMappings.Add("Dues", "Dues")
            tableMapping.ColumnMappings.Add("InputDate", "InputDate")
            tableMapping.ColumnMappings.Add("MemberStatus", "MemberStatus")
            tableMapping.ColumnMappings.Add("Organization", "Organization")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("DataEaseMemberNumber", "DataEaseMemberNumber")
            tableMapping.ColumnMappings.Add("BirthMonth", "BirthMonth")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("Charter", "Charter")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("DateLastUpdated", "DateLastUpdated")
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy")
            tableMapping.ColumnMappings.Add("Dateadded", "Dateadded")
            tableMapping.ColumnMappings.Add("AddedBy", "AddedBy")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CellPhone", "CellPhone")
            tableMapping.ColumnMappings.Add("InvalidAddress", "InvalidAddress")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.MemberBirthdays"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.MemberBirthdaysDataTable, ByVal StartDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (StartDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal StartDate As Global.System.Nullable(Of Date)) As SCCheckInDataSet.MemberBirthdaysDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (StartDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As SCCheckInDataSet.MemberBirthdaysDataTable = New SCCheckInDataSet.MemberBirthdaysDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NewPinkDancersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NewPinkDancers"
            tableMapping.ColumnMappings.Add("New Dancer", "New Dancer")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.NewPinkDancers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.NewPinkDancersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.NewPinkDancersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.NewPinkDancersDataTable = New SCCheckInDataSet.NewPinkDancersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Next3MonthBirthdaysTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Next3MonthBirthdays"
            tableMapping.ColumnMappings.Add("B-Days", "B-Days")
            tableMapping.ColumnMappings.Add("BirthDay", "BirthDay")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Next3MonthBirthdays"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.Next3MonthBirthdaysDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.Next3MonthBirthdaysDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.Next3MonthBirthdaysDataTable = New SCCheckInDataSet.Next3MonthBirthdaysDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PaidYearlyDuesLastMonthTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PaidYearlyDuesLastMonth"
            tableMapping.ColumnMappings.Add("Paid Dues", "Paid Dues")
            tableMapping.ColumnMappings.Add("NewMemberDate", "NewMemberDate")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.PaidYearlyDuesLastMonth"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.PaidYearlyDuesLastMonthDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.PaidYearlyDuesLastMonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.PaidYearlyDuesLastMonthDataTable = New SCCheckInDataSet.PaidYearlyDuesLastMonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class YearlyDuesSoonTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "YearlyDuesSoon"
            tableMapping.ColumnMappings.Add("Dues Coming", "Dues Coming")
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Zip", "Zip")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCheckIn.My.MySettings.Default.SCCheckInConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.YearlyDuesSoon"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SCCheckInDataSet.YearlyDuesSoonDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SCCheckInDataSet.YearlyDuesSoonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SCCheckInDataSet.YearlyDuesSoonDataTable = New SCCheckInDataSet.YearlyDuesSoonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _checkInsTableAdapter As CheckInsTableAdapter
        
        Private _contestantsTableAdapter As ContestantsTableAdapter
        
        Private _oKSwingMemberListTableAdapter As OKSwingMemberListTableAdapter
        
        Private _tblFeesTableAdapter As tblFeesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CheckInsTableAdapter() As CheckInsTableAdapter
            Get
                Return Me._checkInsTableAdapter
            End Get
            Set
                Me._checkInsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ContestantsTableAdapter() As ContestantsTableAdapter
            Get
                Return Me._contestantsTableAdapter
            End Get
            Set
                Me._contestantsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property OKSwingMemberListTableAdapter() As OKSwingMemberListTableAdapter
            Get
                Return Me._oKSwingMemberListTableAdapter
            End Get
            Set
                Me._oKSwingMemberListTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblFeesTableAdapter() As tblFeesTableAdapter
            Get
                Return Me._tblFeesTableAdapter
            End Get
            Set
                Me._tblFeesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._checkInsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._checkInsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._checkInsTableAdapter.Connection
                End If
                If ((Not (Me._contestantsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contestantsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contestantsTableAdapter.Connection
                End If
                If ((Not (Me._oKSwingMemberListTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oKSwingMemberListTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oKSwingMemberListTableAdapter.Connection
                End If
                If ((Not (Me._tblFeesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblFeesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblFeesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As SCCheckInDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.OKSwingMemberList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oKSwingMemberListTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblFees.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblFeesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CheckIns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._checkInsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contestants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contestantsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As SCCheckInDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.OKSwingMemberList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oKSwingMemberListTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblFees.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblFeesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CheckIns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._checkInsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contestants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contestantsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As SCCheckInDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contestants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contestantsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CheckIns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._checkInsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblFees.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblFeesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.OKSwingMemberList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oKSwingMemberListTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As SCCheckInDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._checkInsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._checkInsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._contestantsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contestantsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._oKSwingMemberListTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oKSwingMemberListTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblFeesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblFeesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._checkInsTableAdapter, Me._checkInsTableAdapter.Connection)
                    Me._checkInsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._checkInsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._checkInsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._checkInsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._checkInsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contestantsTableAdapter, Me._contestantsTableAdapter.Connection)
                    Me._contestantsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contestantsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contestantsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contestantsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contestantsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oKSwingMemberListTableAdapter, Me._oKSwingMemberListTableAdapter.Connection)
                    Me._oKSwingMemberListTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oKSwingMemberListTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oKSwingMemberListTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oKSwingMemberListTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oKSwingMemberListTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblFeesTableAdapter, Me._tblFeesTableAdapter.Connection)
                    Me._tblFeesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblFeesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblFeesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblFeesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblFeesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._checkInsTableAdapter) Is Nothing) Then
                    Me._checkInsTableAdapter.Connection = CType(revertConnections(Me._checkInsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._checkInsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contestantsTableAdapter) Is Nothing) Then
                    Me._contestantsTableAdapter.Connection = CType(revertConnections(Me._contestantsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contestantsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oKSwingMemberListTableAdapter) Is Nothing) Then
                    Me._oKSwingMemberListTableAdapter.Connection = CType(revertConnections(Me._oKSwingMemberListTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oKSwingMemberListTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblFeesTableAdapter) Is Nothing) Then
                    Me._tblFeesTableAdapter.Connection = CType(revertConnections(Me._tblFeesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblFeesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
